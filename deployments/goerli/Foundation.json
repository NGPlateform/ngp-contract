{
  "address": "0x1c5e3cFF8Def2C39F244fc0daa442676D66c952A",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Confirmation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Execution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "ExecutionFailure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnerRemoval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "RequirementChange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Revocation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "Submission",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_token",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        }
      ],
      "name": "changeRequirement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "confirmTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "confirmations",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "executeTransaction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmationCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "getConfirmations",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_confirmations",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "pending",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "name": "getTransactionIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_transactionIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_required",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "isConfirmed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "owners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "release",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "removeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "replaceOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "required",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "name": "revokeConfirmation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "submitTransaction",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "transactionId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactionCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transactions",
      "outputs": [
        {
          "internalType": "address",
          "name": "destination",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcd046bdf1d2e27075bddf963e164771a93f0bc9bc66a73e223166565fdeec491",
  "receipt": {
    "to": null,
    "from": "0x75bC9FBD1F907695A5ab823772F78981bE0BFC83",
    "contractAddress": "0x1c5e3cFF8Def2C39F244fc0daa442676D66c952A",
    "transactionIndex": 54,
    "gasUsed": "1740066",
    "logsBloom": "0x
    "blockHash": "0x47638e82092fbc9ead789d891abbd704a649978f09ba4f6f33d75ed66f831573",
    "transactionHash": "0xcd046bdf1d2e27075bddf963e164771a93f0bc9bc66a73e223166565fdeec491",
    "logs": [],
    "blockNumber": 8287150,
    "cumulativeGasUsed": "15645641",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11870969c81590d0cd62d2f5d6a62b34",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Confirmation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Execution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"ExecutionFailure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnerRemoval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"RequirementChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Revocation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"Submission\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MAX_OWNER_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"}],\"name\":\"changeRequirement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"confirmTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"confirmations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"executeTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmationCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"getConfirmations\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_confirmations\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pending\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"name\":\"getTransactionIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_transactionIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_required\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"isConfirmed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"owners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"release\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"removeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"replaceOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"required\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"name\":\"revokeConfirmation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"submitTransaction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transactionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transactions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addOwner(address)\":{\"details\":\"Allows to add a new owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of new owner.\"}},\"changeRequirement(uint256)\":{\"details\":\"Allows to change the number of required confirmations. Transaction has to be sent by wallet.\",\"params\":{\"_required\":\"Number of required confirmations.\"}},\"confirmTransaction(uint256)\":{\"details\":\"Allows an owner to confirm a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"executeTransaction(uint256)\":{\"details\":\"Allows anyone to execute a confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"getConfirmationCount(uint256)\":{\"details\":\"Returns number of confirmations of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"count\":\"Number of confirmations.\"}},\"getConfirmations(uint256)\":{\"details\":\"Returns array with owner addresses, which confirmed transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_confirmations\":\"Returns array of owner addresses.\"}},\"getOwners()\":{\"details\":\"Returns list of owners.\",\"returns\":{\"_0\":\"List of owner addresses.\"}},\"getTransactionCount(bool,bool)\":{\"details\":\"Returns total number of transactions after filers are applied.\",\"params\":{\"executed\":\"Include executed transactions.\",\"pending\":\"Include pending transactions.\"},\"returns\":{\"count\":\"Total number of transactions after filters are applied.\"}},\"getTransactionIds(uint256,uint256,bool,bool)\":{\"details\":\"Returns list of transaction IDs in defined range.\",\"params\":{\"executed\":\"Include executed transactions.\",\"from\":\"Index start position of transaction array.\",\"pending\":\"Include pending transactions.\",\"to\":\"Index end position of transaction array.\"},\"returns\":{\"_transactionIds\":\"Returns array of transaction IDs.\"}},\"isConfirmed(uint256)\":{\"details\":\"Returns the confirmation status of a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"},\"returns\":{\"_0\":\"Confirmation status.\"}},\"removeOwner(address)\":{\"details\":\"Allows to remove an owner. Transaction has to be sent by wallet.\",\"params\":{\"owner\":\"Address of owner.\"}},\"replaceOwner(address,address)\":{\"details\":\"Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\",\"params\":{\"newOwner\":\"Address of new owner.\",\"owner\":\"Address of owner to be replaced.\"}},\"revokeConfirmation(uint256)\":{\"details\":\"Allows an owner to revoke a confirmation for a transaction.\",\"params\":{\"transactionId\":\"Transaction ID.\"}},\"submitTransaction(address,uint256,bytes)\":{\"details\":\"Allows an owner to submit and confirm a transaction.\",\"params\":{\"data\":\"Transaction data payload.\",\"destination\":\"Transaction target address.\",\"value\":\"Transaction ether value.\"},\"returns\":{\"transactionId\":\"Returns transaction ID.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Foundation.sol\":\"Foundation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Foundation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./MultiSigWallet.sol\\\";\\n\\ncontract Foundation  is MultiSigWallet{\\n    address public  _token;\\n\\n    address private immutable owner;\\n\\n    event Released(address user,uint256 amount);\\n\\n    constructor() {\\n         owner = msg.sender;\\n    }\\n\\n    function initialize(\\n        address[] memory _owners,\\n        uint256 _required,\\n        address token\\n    ) external {\\n        require(msg.sender == owner,\\\"only owner\\\");\\n\\n        MultiSigWallet_initialize(_owners, _required);\\n\\n       _token = token;\\n    }\\n\\n    function release(address _beneficiary,uint256 _amount) public onlyWallet {\\n        uint256 value = IERC20(_token).balanceOf(address(this));\\n            \\n        require(_amount <= value,\\\"amount lt balanceOf\\\");\\n\\n        IERC20(_token).transfer(_beneficiary, _amount);\\n\\n        emit Released(_beneficiary,_amount);\\n    }\\n}\",\"keccak256\":\"0xa734683ea3fa7d05b4d5de09b34389aa27782fa2a8e6fda7ecad66dfaf7818b6\",\"license\":\"MIT\"},\"contracts/MultiSigWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.8;\\n\\ncontract MultiSigWallet {\\n    /*\\n     *  Events\\n     */\\n    event Confirmation(address indexed sender, uint indexed transactionId);\\n    event Revocation(address indexed sender, uint indexed transactionId);\\n    event Submission(uint indexed transactionId);\\n    event Execution(uint indexed transactionId);\\n    event ExecutionFailure(uint indexed transactionId);\\n    event Deposit(address indexed sender, uint value);\\n    event OwnerAddition(address indexed owner);\\n    event OwnerRemoval(address indexed owner);\\n    event RequirementChange(uint required);\\n\\n    /*\\n     *  Constants\\n     */\\n    uint constant public MAX_OWNER_COUNT = 50;\\n\\n    /*\\n     *  Storage\\n     */\\n    mapping (uint => Transaction) public transactions;\\n    mapping (uint => mapping (address => bool)) public confirmations;\\n    mapping (address => bool) public isOwner;\\n    address[] public owners;\\n    uint public required;\\n    uint public transactionCount;\\n\\n    struct Transaction {\\n        address destination;\\n        uint value;\\n        bytes data;\\n        bool executed;\\n    }\\n\\n    /*\\n     *  Modifiers\\n     */\\n    modifier onlyWallet() {\\n        require(msg.sender == address(this));\\n        _;\\n    }\\n\\n    modifier ownerDoesNotExist(address owner) {\\n        require(!isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier ownerExists(address owner) {\\n        require(isOwner[owner]);\\n        _;\\n    }\\n\\n    modifier transactionExists(uint transactionId) {\\n        require(transactions[transactionId].destination != address(0));\\n        _;\\n    }\\n\\n    modifier confirmed(uint transactionId, address owner) {\\n        require(confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notConfirmed(uint transactionId, address owner) {\\n        require(!confirmations[transactionId][owner]);\\n        _;\\n    }\\n\\n    modifier notExecuted(uint transactionId) {\\n        require(!transactions[transactionId].executed);\\n        _;\\n    }\\n\\n    modifier notNull(address _address) {\\n        require(_address != address(0));\\n        _;\\n    }\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(ownerCount <= MAX_OWNER_COUNT\\n            && _required <= ownerCount\\n            && _required != 0\\n            && ownerCount != 0);\\n        _;\\n    }\\n\\n    /// @dev Fallback function allows to deposit ether.\\n    fallback()\\n        external\\n        payable\\n    {\\n        if (msg.value > 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    receive()\\n        external\\n        payable\\n    {\\n        if (msg.value > 0)\\n            emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    /*\\n     * Public functions\\n     */\\n    /// @dev Contract constructor sets initial owners and required number of confirmations.\\n    /// @param _owners List of initial owners.\\n    /// @param _required Number of required confirmations.\\n    function MultiSigWallet_initialize(address[] memory _owners, uint _required)\\n        validRequirement(_owners.length, _required) internal\\n    {\\n        for (uint i=0; i<_owners.length; i++) {\\n            require(!isOwner[_owners[i]] && _owners[i] != address(0));\\n            isOwner[_owners[i]] = true;\\n        }\\n        owners = _owners;\\n        required = _required;\\n    }\\n\\n    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of new owner.\\n    function addOwner(address owner)\\n        public\\n        onlyWallet\\n        ownerDoesNotExist(owner)\\n        notNull(owner)\\n        validRequirement(owners.length + 1, required)\\n    {\\n        isOwner[owner] = true;\\n        owners.push(owner);\\n        emit OwnerAddition(owner);\\n    }\\n\\n    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner.\\n    function removeOwner(address owner)\\n        public\\n        onlyWallet\\n        ownerExists(owner)\\n    {\\n        isOwner[owner] = false;\\n        for (uint i=0; i<owners.length - 1; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = owners[owners.length - 1];\\n                break;\\n            }\\n        owners.pop();\\n        if (required > owners.length)\\n            changeRequirement(owners.length);\\n        emit OwnerRemoval(owner);\\n    }\\n\\n    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\\n    /// @param owner Address of owner to be replaced.\\n    /// @param newOwner Address of new owner.\\n    function replaceOwner(address owner, address newOwner)\\n        public\\n        onlyWallet\\n        ownerExists(owner)\\n        ownerDoesNotExist(newOwner)\\n    {\\n        for (uint i=0; i<owners.length; i++)\\n            if (owners[i] == owner) {\\n                owners[i] = newOwner;\\n                break;\\n            }\\n        isOwner[owner] = false;\\n        isOwner[newOwner] = true;\\n        emit OwnerRemoval(owner);\\n        emit OwnerAddition(newOwner);\\n    }\\n\\n    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\\n    /// @param _required Number of required confirmations.\\n    function changeRequirement(uint _required)\\n        public\\n        onlyWallet\\n        validRequirement(owners.length, _required)\\n    {\\n        required = _required;\\n        emit RequirementChange(_required);\\n    }\\n\\n    /// @dev Allows an owner to submit and confirm a transaction.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return transactionId Returns transaction ID.\\n    function submitTransaction(address destination, uint value, bytes memory data)\\n        public\\n        returns (uint transactionId)\\n    {\\n        transactionId = addTransaction(destination, value, data);\\n        confirmTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to confirm a transaction.\\n    /// @param transactionId Transaction ID.\\n    function confirmTransaction(uint transactionId)\\n        public\\n        virtual\\n        ownerExists(msg.sender)\\n        transactionExists(transactionId)\\n        notConfirmed(transactionId, msg.sender)\\n    {\\n        confirmations[transactionId][msg.sender] = true;\\n        emit Confirmation(msg.sender, transactionId);\\n        executeTransaction(transactionId);\\n    }\\n\\n    /// @dev Allows an owner to revoke a confirmation for a transaction.\\n    /// @param transactionId Transaction ID.\\n    function revokeConfirmation(uint transactionId)\\n        public\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        confirmations[transactionId][msg.sender] = false;\\n        emit Revocation(msg.sender, transactionId);\\n    }\\n\\n    /// @dev Allows anyone to execute a confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    function executeTransaction(uint transactionId)\\n        public\\n        virtual\\n        ownerExists(msg.sender)\\n        confirmed(transactionId, msg.sender)\\n        notExecuted(transactionId)\\n    {\\n        if (isConfirmed(transactionId)) {\\n            Transaction storage txn = transactions[transactionId];\\n            txn.executed = true;\\n            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))\\n                emit Execution(transactionId);\\n            else {\\n                emit ExecutionFailure(transactionId);\\n                txn.executed = false;\\n            }\\n        }\\n    }\\n\\n    // call has been separated into its own function in order to take advantage\\n    // of the Solidity's code generator to produce a loop that copies tx.data into memory.\\n    function external_call(address destination, uint value, uint dataLength, bytes memory data) internal returns (bool) {\\n        bool result;\\n        assembly {\\n            let x := mload(0x40)   // \\\"Allocate\\\" memory for output (0x40 is where \\\"free memory\\\" pointer is stored by convention)\\n            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that\\n            result := call(\\n                sub(gas(), 34710),   // 34710 is the value that solidity is currently emitting\\n                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +\\n                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)\\n                destination,\\n                value,\\n                d,\\n                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem\\n                x,\\n                0                  // Output is ignored, therefore the output size is zero\\n            )\\n        }\\n        return result;\\n    }\\n\\n    /// @dev Returns the confirmation status of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return Confirmation status.\\n    function isConfirmed(uint transactionId)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint count = 0;\\n        for (uint i=0; i<owners.length; i++) {\\n            if (confirmations[transactionId][owners[i]])\\n                count += 1;\\n            if (count == required)\\n                return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /*\\n     * Internal functions\\n     */\\n    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\\n    /// @param destination Transaction target address.\\n    /// @param value Transaction ether value.\\n    /// @param data Transaction data payload.\\n    /// @return transactionId Returns transaction ID.\\n    function addTransaction(address destination, uint value, bytes memory data)\\n        internal\\n        notNull(destination)\\n        returns (uint transactionId)\\n    {\\n        transactionId = transactionCount;\\n        transactions[transactionId] = Transaction({\\n            destination: destination,\\n            value: value,\\n            data: data,\\n            executed: false\\n        });\\n        transactionCount += 1;\\n        emit Submission(transactionId);\\n    }\\n\\n    /*\\n     * Web3 call functions\\n     */\\n    /// @dev Returns number of confirmations of a transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return count Number of confirmations.\\n    function getConfirmationCount(uint transactionId)\\n        public\\n        view\\n        returns (uint count)\\n    {\\n        for (uint i=0; i<owners.length; i++)\\n            if (confirmations[transactionId][owners[i]])\\n                count += 1;\\n    }\\n\\n    /// @dev Returns total number of transactions after filers are applied.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return count Total number of transactions after filters are applied.\\n    function getTransactionCount(bool pending, bool executed)\\n        public\\n        view\\n        returns (uint count)\\n    {\\n        for (uint i=0; i<transactionCount; i++)\\n            if (   pending && !transactions[i].executed\\n                || executed && transactions[i].executed)\\n                count += 1;\\n    }\\n\\n    /// @dev Returns list of owners.\\n    /// @return List of owner addresses.\\n    function getOwners()\\n        public\\n        view\\n        returns (address[] memory)\\n    {\\n        return owners;\\n    }\\n\\n    /// @dev Returns array with owner addresses, which confirmed transaction.\\n    /// @param transactionId Transaction ID.\\n    /// @return _confirmations Returns array of owner addresses.\\n    function getConfirmations(uint transactionId)\\n        public\\n        view\\n        returns (address[] memory _confirmations)\\n    {\\n        address[] memory confirmationsTemp = new address[](owners.length);\\n        uint count = 0;\\n        uint i;\\n        for (i=0; i<owners.length; i++)\\n            if (confirmations[transactionId][owners[i]]) {\\n                confirmationsTemp[count] = owners[i];\\n                count += 1;\\n            }\\n        _confirmations = new address[](count);\\n        for (i=0; i<count; i++)\\n            _confirmations[i] = confirmationsTemp[i];\\n    }\\n\\n    /// @dev Returns list of transaction IDs in defined range.\\n    /// @param from Index start position of transaction array.\\n    /// @param to Index end position of transaction array.\\n    /// @param pending Include pending transactions.\\n    /// @param executed Include executed transactions.\\n    /// @return _transactionIds Returns array of transaction IDs.\\n    function getTransactionIds(uint from, uint to, bool pending, bool executed)\\n        public\\n        view\\n        returns (uint[] memory _transactionIds)\\n    {\\n        uint[] memory transactionIdsTemp = new uint[](transactionCount);\\n        uint count = 0;\\n        uint i;\\n        for (i=0; i<transactionCount; i++)\\n            if (   pending && !transactions[i].executed\\n                || executed && transactions[i].executed)\\n            {\\n                transactionIdsTemp[count] = i;\\n                count += 1;\\n            }\\n        _transactionIds = new uint[](to - from);\\n        for (i=from; i<to; i++)\\n            _transactionIds[i - from] = transactionIdsTemp[i];\\n    }\\n}\\n\",\"keccak256\":\"0x0e4e5fcd4f5f02f5b15d5d0ca4ff71a71ee8e3053c4ef0901fb61249a0625f1e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5033606081901b608052611e856100326000396000610b0d0152611e856000f3fe60806040526004361061014f5760003560e01c8063a0e67e2b116100b6578063c64274741161006f578063c642747414610486578063d74f8edd146104a6578063dc8452cd146104bb578063e20056e6146104d1578063ecd0c0c3146104f1578063ee22610b1461051157610193565b8063a0e67e2b146103c1578063a8abe69a146103e3578063b5dc40c314610410578063b77bf60014610430578063ba51a6df14610446578063c01a8c841461046657610193565b8063547415251161010857806354741525146102e35780637065cb481461031157806372483bf914610331578063784547a7146103515780638b51d13f146103715780639ace38c21461039157610193565b8063025e7c27146101cb5780630357371d14610208578063173825d91461022857806320ea8d86146102485780632f54bf6e146102685780633411c81c146102a857610193565b366101935734156101915760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a25b005b34156101915760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90602001610188565b3480156101d757600080fd5b506101eb6101e6366004611936565b610531565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021457600080fd5b5061019161022336600461196b565b61055b565b34801561023457600080fd5b50610191610243366004611995565b6106ff565b34801561025457600080fd5b50610191610263366004611936565b6108b6565b34801561027457600080fd5b50610298610283366004611995565b60026020526000908152604090205460ff1681565b60405190151581526020016101ff565b3480156102b457600080fd5b506102986102c33660046119b0565b600160209081526000928352604080842090915290825290205460ff1681565b3480156102ef57600080fd5b506103036102fe3660046119ed565b61096c565b6040519081526020016101ff565b34801561031d57600080fd5b5061019161032c366004611995565b6109e9565b34801561033d57600080fd5b5061019161034c366004611a6d565b610b02565b34801561035d57600080fd5b5061029861036c366004611936565b610b95565b34801561037d57600080fd5b5061030361038c366004611936565b610c34565b34801561039d57600080fd5b506103b16103ac366004611936565b610cba565b6040516101ff9493929190611b34565b3480156103cd57600080fd5b506103d6610d78565b6040516101ff9190611bb0565b3480156103ef57600080fd5b506104036103fe366004611bfd565b610dda565b6040516101ff9190611c47565b34801561041c57600080fd5b506103d661042b366004611936565b610f72565b34801561043c57600080fd5b5061030360055481565b34801561045257600080fd5b50610191610461366004611936565b61114a565b34801561047257600080fd5b50610191610481366004611936565b6111bf565b34801561049257600080fd5b506103036104a1366004611c7f565b611286565b3480156104b257600080fd5b50610303603281565b3480156104c757600080fd5b5061030360045481565b3480156104dd57600080fd5b506101916104ec366004611d2e565b6112a5565b3480156104fd57600080fd5b506006546101eb906001600160a01b031681565b34801561051d57600080fd5b5061019161052c366004611936565b611438565b6003818154811061054157600080fd5b6000918252602090912001546001600160a01b0316905081565b33301461056757600080fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156105ab57600080fd5b505afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190611d58565b9050808211156106305760405162461bcd60e51b815260206004820152601360248201527230b6b7bab73a10363a103130b630b731b2a7b360691b60448201526064015b60405180910390fd5b60065460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561067e57600080fd5b505af1158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611d71565b50604080516001600160a01b0385168152602081018490527fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e91015b60405180910390a1505050565b33301461070b57600080fd5b6001600160a01b038116600090815260026020526040902054819060ff1661073257600080fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b60035461076290600190611da4565b81101561083257826001600160a01b03166003828154811061078657610786611dbb565b6000918252602090912001546001600160a01b0316141561082057600380546107b190600190611da4565b815481106107c1576107c1611dbb565b600091825260209091200154600380546001600160a01b0390921691839081106107ed576107ed611dbb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610832565b8061082a81611dd1565b915050610753565b50600380548061084457610844611dec565b600082815260209020810160001990810180546001600160a01b0319169055019055600354600454111561087e5760035461087e9061114a565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff166108d257600080fd5b60008281526001602090815260408083203380855292529091205483919060ff166108fc57600080fd5b600084815260208190526040902060030154849060ff161561091d57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b6000805b6005548110156109e257838015610999575060008181526020819052604090206003015460ff16155b806109bd57508280156109bd575060008181526020819052604090206003015460ff165b156109d0576109cd600183611e02565b91505b806109da81611dd1565b915050610970565b5092915050565b3330146109f557600080fd5b6001600160a01b038116600090815260026020526040902054819060ff1615610a1d57600080fd5b816001600160a01b038116610a3157600080fd5b600354610a3f906001611e02565b60045460328211158015610a535750818111155b8015610a5e57508015155b8015610a6957508115155b610a7257600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b675760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606401610627565b610b7183836115fb565b600680546001600160a01b0319166001600160a01b03929092169190911790555050565b600080805b600354811015610c2a5760008481526001602052604081206003805491929184908110610bc957610bc9611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610c0457610c01600183611e02565b91505b600454821415610c18575060019392505050565b80610c2281611dd1565b915050610b9a565b5060009392505050565b6000805b600354811015610cb45760008381526001602052604081206003805491929184908110610c6757610c67611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610ca257610c9f600183611e02565b91505b80610cac81611dd1565b915050610c38565b50919050565b6000602081905290815260409020805460018201546002830180546001600160a01b03909316939192610cec90611e1a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1890611e1a565b8015610d655780601f10610d3a57610100808354040283529160200191610d65565b820191906000526020600020905b815481529060010190602001808311610d4857829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610dd057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db2575b5050505050905090565b6060600060055467ffffffffffffffff811115610df957610df9611a26565b604051908082528060200260200182016040528015610e22578160200160208202803683370190505b5090506000805b600554811015610eb957858015610e52575060008181526020819052604090206003015460ff16155b80610e765750848015610e76575060008181526020819052604090206003015460ff165b15610ea75780838381518110610e8e57610e8e611dbb565b6020908102919091010152610ea4600183611e02565b91505b80610eb181611dd1565b915050610e29565b610ec38888611da4565b67ffffffffffffffff811115610edb57610edb611a26565b604051908082528060200260200182016040528015610f04578160200160208202803683370190505b5093508790505b86811015610f6757828181518110610f2557610f25611dbb565b6020026020010151848983610f3a9190611da4565b81518110610f4a57610f4a611dbb565b602090810291909101015280610f5f81611dd1565b915050610f0b565b505050949350505050565b60035460609060009067ffffffffffffffff811115610f9357610f93611a26565b604051908082528060200260200182016040528015610fbc578160200160208202803683370190505b5090506000805b60035481101561109a5760008581526001602052604081206003805491929184908110610ff257610ff2611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615611088576003818154811061103257611032611dbb565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061106257611062611dbb565b6001600160a01b0390921660209283029190910190910152611085600183611e02565b91505b8061109281611dd1565b915050610fc3565b8167ffffffffffffffff8111156110b3576110b3611a26565b6040519080825280602002602001820160405280156110dc578160200160208202803683370190505b509350600090505b81811015611142578281815181106110fe576110fe611dbb565b602002602001015184828151811061111857611118611dbb565b6001600160a01b03909216602092830291909101909101528061113a81611dd1565b9150506110e4565b505050919050565b33301461115657600080fd5b600354816032821180159061116b5750818111155b801561117657508015155b801561118157508115155b61118a57600080fd5b60048390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a906020016106f2565b3360008181526002602052604090205460ff166111db57600080fd5b60008281526020819052604090205482906001600160a01b03166111fe57600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561122957600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a361127f85611438565b5050505050565b6000611293848484611732565b905061129e816111bf565b9392505050565b3330146112b157600080fd5b6001600160a01b038216600090815260026020526040902054829060ff166112d857600080fd5b6001600160a01b038216600090815260026020526040902054829060ff161561130057600080fd5b60005b60035481101561139e57846001600160a01b03166003828154811061132a5761132a611dbb565b6000918252602090912001546001600160a01b0316141561138c57836003828154811061135957611359611dbb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061139e565b8061139681611dd1565b915050611303565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff1661145457600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1661147e57600080fd5b600084815260208190526040902060030154849060ff161561149f57600080fd5b6114a885610b95565b1561127f57600085815260208190526040902060038101805460ff19166001908117909155815490820154600283018054611586936001600160a01b03169291906114f290611e1a565b905084600201805461150390611e1a565b80601f016020809104026020016040519081016040528092919081815260200182805461152f90611e1a565b801561157c5780601f106115515761010080835404028352916020019161157c565b820191906000526020600020905b81548152906001019060200180831161155f57829003601f168201915b5050505050611825565b156115bb5760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a26115f3565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038101805460ff191690555b505050505050565b8151816032821115801561160f5750818111155b801561161a57508015155b801561162557508115155b61162e57600080fd5b60005b8451811015611715576002600086838151811061165057611650611dbb565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161580156116b0575060006001600160a01b031685828151811061169c5761169c611dbb565b60200260200101516001600160a01b031614155b6116b957600080fd5b6001600260008784815181106116d1576116d1611dbb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061170d81611dd1565b915050611631565b508351611729906003906020870190611848565b50505060045550565b6000836001600160a01b03811661174857600080fd5b600554604080516080810182526001600160a01b038881168252602080830189815283850189815260006060860181905287815280845295909520845181546001600160a01b031916941693909317835551600183015592518051949650919390926117bb9260028501929101906118ad565b50606091909101516003909101805460ff191691151591909117905560058054600191906000906117ed908490611e02565b909155505060405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b82805482825590600052602060002090810192821561189d579160200282015b8281111561189d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611868565b506118a9929150611921565b5090565b8280546118b990611e1a565b90600052602060002090601f0160209004810192826118db576000855561189d565b82601f106118f457805160ff191683800117855561189d565b8280016001018555821561189d579182015b8281111561189d578251825591602001919060010190611906565b5b808211156118a95760008155600101611922565b60006020828403121561194857600080fd5b5035919050565b80356001600160a01b038116811461196657600080fd5b919050565b6000806040838503121561197e57600080fd5b6119878361194f565b946020939093013593505050565b6000602082840312156119a757600080fd5b61129e8261194f565b600080604083850312156119c357600080fd5b823591506119d36020840161194f565b90509250929050565b80151581146119ea57600080fd5b50565b60008060408385031215611a0057600080fd5b8235611a0b816119dc565b91506020830135611a1b816119dc565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6557611a65611a26565b604052919050565b600080600060608486031215611a8257600080fd5b833567ffffffffffffffff80821115611a9a57600080fd5b818601915086601f830112611aae57600080fd5b8135602082821115611ac257611ac2611a26565b8160051b9250611ad3818401611a3c565b828152928401810192818101908a851115611aed57600080fd5b948201945b84861015611b1257611b038661194f565b82529482019490820190611af2565b9750508701359450611b2b92505060408601905061194f565b90509250925092565b60018060a01b038516815260006020858184015260806040840152845180608085015260005b81811015611b765786810183015185820160a001528201611b5a565b81811115611b8857600060a083870101525b50601f01601f1916830160a0019150611ba79050606083018415159052565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611bf15783516001600160a01b031683529284019291840191600101611bcc565b50909695505050505050565b60008060008060808587031215611c1357600080fd5b84359350602085013592506040850135611c2c816119dc565b91506060850135611c3c816119dc565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015611bf157835183529284019291840191600101611c63565b600080600060608486031215611c9457600080fd5b611c9d8461194f565b92506020808501359250604085013567ffffffffffffffff80821115611cc257600080fd5b818701915087601f830112611cd657600080fd5b813581811115611ce857611ce8611a26565b611cfa601f8201601f19168501611a3c565b91508082528884828501011115611d1057600080fd5b80848401858401376000848284010152508093505050509250925092565b60008060408385031215611d4157600080fd5b611d4a8361194f565b91506119d36020840161194f565b600060208284031215611d6a57600080fd5b5051919050565b600060208284031215611d8357600080fd5b815161129e816119dc565b634e487b7160e01b600052601160045260246000fd5b600082821015611db657611db6611d8e565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611de557611de5611d8e565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008219821115611e1557611e15611d8e565b500190565b600181811c90821680611e2e57607f821691505b60208210811415610cb457634e487b7160e01b600052602260045260246000fdfea2646970667358221220358b46619564192abe2c828345119be5af8169270dee0f93d0fdebcda16dcb5764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061014f5760003560e01c8063a0e67e2b116100b6578063c64274741161006f578063c642747414610486578063d74f8edd146104a6578063dc8452cd146104bb578063e20056e6146104d1578063ecd0c0c3146104f1578063ee22610b1461051157610193565b8063a0e67e2b146103c1578063a8abe69a146103e3578063b5dc40c314610410578063b77bf60014610430578063ba51a6df14610446578063c01a8c841461046657610193565b8063547415251161010857806354741525146102e35780637065cb481461031157806372483bf914610331578063784547a7146103515780638b51d13f146103715780639ace38c21461039157610193565b8063025e7c27146101cb5780630357371d14610208578063173825d91461022857806320ea8d86146102485780632f54bf6e146102685780633411c81c146102a857610193565b366101935734156101915760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c906020015b60405180910390a25b005b34156101915760405134815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90602001610188565b3480156101d757600080fd5b506101eb6101e6366004611936565b610531565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561021457600080fd5b5061019161022336600461196b565b61055b565b34801561023457600080fd5b50610191610243366004611995565b6106ff565b34801561025457600080fd5b50610191610263366004611936565b6108b6565b34801561027457600080fd5b50610298610283366004611995565b60026020526000908152604090205460ff1681565b60405190151581526020016101ff565b3480156102b457600080fd5b506102986102c33660046119b0565b600160209081526000928352604080842090915290825290205460ff1681565b3480156102ef57600080fd5b506103036102fe3660046119ed565b61096c565b6040519081526020016101ff565b34801561031d57600080fd5b5061019161032c366004611995565b6109e9565b34801561033d57600080fd5b5061019161034c366004611a6d565b610b02565b34801561035d57600080fd5b5061029861036c366004611936565b610b95565b34801561037d57600080fd5b5061030361038c366004611936565b610c34565b34801561039d57600080fd5b506103b16103ac366004611936565b610cba565b6040516101ff9493929190611b34565b3480156103cd57600080fd5b506103d6610d78565b6040516101ff9190611bb0565b3480156103ef57600080fd5b506104036103fe366004611bfd565b610dda565b6040516101ff9190611c47565b34801561041c57600080fd5b506103d661042b366004611936565b610f72565b34801561043c57600080fd5b5061030360055481565b34801561045257600080fd5b50610191610461366004611936565b61114a565b34801561047257600080fd5b50610191610481366004611936565b6111bf565b34801561049257600080fd5b506103036104a1366004611c7f565b611286565b3480156104b257600080fd5b50610303603281565b3480156104c757600080fd5b5061030360045481565b3480156104dd57600080fd5b506101916104ec366004611d2e565b6112a5565b3480156104fd57600080fd5b506006546101eb906001600160a01b031681565b34801561051d57600080fd5b5061019161052c366004611936565b611438565b6003818154811061054157600080fd5b6000918252602090912001546001600160a01b0316905081565b33301461056757600080fd5b6006546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156105ab57600080fd5b505afa1580156105bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e39190611d58565b9050808211156106305760405162461bcd60e51b815260206004820152601360248201527230b6b7bab73a10363a103130b630b731b2a7b360691b60448201526064015b60405180910390fd5b60065460405163a9059cbb60e01b81526001600160a01b038581166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561067e57600080fd5b505af1158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611d71565b50604080516001600160a01b0385168152602081018490527fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e91015b60405180910390a1505050565b33301461070b57600080fd5b6001600160a01b038116600090815260026020526040902054819060ff1661073257600080fd5b6001600160a01b0382166000908152600260205260408120805460ff191690555b60035461076290600190611da4565b81101561083257826001600160a01b03166003828154811061078657610786611dbb565b6000918252602090912001546001600160a01b0316141561082057600380546107b190600190611da4565b815481106107c1576107c1611dbb565b600091825260209091200154600380546001600160a01b0390921691839081106107ed576107ed611dbb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610832565b8061082a81611dd1565b915050610753565b50600380548061084457610844611dec565b600082815260209020810160001990810180546001600160a01b0319169055019055600354600454111561087e5760035461087e9061114a565b6040516001600160a01b038316907f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9090600090a25050565b3360008181526002602052604090205460ff166108d257600080fd5b60008281526001602090815260408083203380855292529091205483919060ff166108fc57600080fd5b600084815260208190526040902060030154849060ff161561091d57600080fd5b6000858152600160209081526040808320338085529252808320805460ff191690555187927ff6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e991a35050505050565b6000805b6005548110156109e257838015610999575060008181526020819052604090206003015460ff16155b806109bd57508280156109bd575060008181526020819052604090206003015460ff165b156109d0576109cd600183611e02565b91505b806109da81611dd1565b915050610970565b5092915050565b3330146109f557600080fd5b6001600160a01b038116600090815260026020526040902054819060ff1615610a1d57600080fd5b816001600160a01b038116610a3157600080fd5b600354610a3f906001611e02565b60045460328211158015610a535750818111155b8015610a5e57508015155b8015610a6957508115155b610a7257600080fd5b6001600160a01b038516600081815260026020526040808220805460ff1916600190811790915560038054918201815583527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03191684179055517ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d9190a25050505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610b675760405162461bcd60e51b815260206004820152600a60248201526937b7363c9037bbb732b960b11b6044820152606401610627565b610b7183836115fb565b600680546001600160a01b0319166001600160a01b03929092169190911790555050565b600080805b600354811015610c2a5760008481526001602052604081206003805491929184908110610bc957610bc9611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610c0457610c01600183611e02565b91505b600454821415610c18575060019392505050565b80610c2281611dd1565b915050610b9a565b5060009392505050565b6000805b600354811015610cb45760008381526001602052604081206003805491929184908110610c6757610c67611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615610ca257610c9f600183611e02565b91505b80610cac81611dd1565b915050610c38565b50919050565b6000602081905290815260409020805460018201546002830180546001600160a01b03909316939192610cec90611e1a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d1890611e1a565b8015610d655780601f10610d3a57610100808354040283529160200191610d65565b820191906000526020600020905b815481529060010190602001808311610d4857829003601f168201915b5050506003909301549192505060ff1684565b60606003805480602002602001604051908101604052809291908181526020018280548015610dd057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610db2575b5050505050905090565b6060600060055467ffffffffffffffff811115610df957610df9611a26565b604051908082528060200260200182016040528015610e22578160200160208202803683370190505b5090506000805b600554811015610eb957858015610e52575060008181526020819052604090206003015460ff16155b80610e765750848015610e76575060008181526020819052604090206003015460ff165b15610ea75780838381518110610e8e57610e8e611dbb565b6020908102919091010152610ea4600183611e02565b91505b80610eb181611dd1565b915050610e29565b610ec38888611da4565b67ffffffffffffffff811115610edb57610edb611a26565b604051908082528060200260200182016040528015610f04578160200160208202803683370190505b5093508790505b86811015610f6757828181518110610f2557610f25611dbb565b6020026020010151848983610f3a9190611da4565b81518110610f4a57610f4a611dbb565b602090810291909101015280610f5f81611dd1565b915050610f0b565b505050949350505050565b60035460609060009067ffffffffffffffff811115610f9357610f93611a26565b604051908082528060200260200182016040528015610fbc578160200160208202803683370190505b5090506000805b60035481101561109a5760008581526001602052604081206003805491929184908110610ff257610ff2611dbb565b60009182526020808320909101546001600160a01b0316835282019290925260400190205460ff1615611088576003818154811061103257611032611dbb565b9060005260206000200160009054906101000a90046001600160a01b031683838151811061106257611062611dbb565b6001600160a01b0390921660209283029190910190910152611085600183611e02565b91505b8061109281611dd1565b915050610fc3565b8167ffffffffffffffff8111156110b3576110b3611a26565b6040519080825280602002602001820160405280156110dc578160200160208202803683370190505b509350600090505b81811015611142578281815181106110fe576110fe611dbb565b602002602001015184828151811061111857611118611dbb565b6001600160a01b03909216602092830291909101909101528061113a81611dd1565b9150506110e4565b505050919050565b33301461115657600080fd5b600354816032821180159061116b5750818111155b801561117657508015155b801561118157508115155b61118a57600080fd5b60048390556040518381527fa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a906020016106f2565b3360008181526002602052604090205460ff166111db57600080fd5b60008281526020819052604090205482906001600160a01b03166111fe57600080fd5b60008381526001602090815260408083203380855292529091205484919060ff161561122957600080fd5b6000858152600160208181526040808420338086529252808420805460ff1916909317909255905187927f4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef91a361127f85611438565b5050505050565b6000611293848484611732565b905061129e816111bf565b9392505050565b3330146112b157600080fd5b6001600160a01b038216600090815260026020526040902054829060ff166112d857600080fd5b6001600160a01b038216600090815260026020526040902054829060ff161561130057600080fd5b60005b60035481101561139e57846001600160a01b03166003828154811061132a5761132a611dbb565b6000918252602090912001546001600160a01b0316141561138c57836003828154811061135957611359611dbb565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061139e565b8061139681611dd1565b915050611303565b506001600160a01b03808516600081815260026020526040808220805460ff1990811690915593871682528082208054909416600117909355915190917f8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b9091a26040516001600160a01b038416907ff39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d90600090a250505050565b3360008181526002602052604090205460ff1661145457600080fd5b60008281526001602090815260408083203380855292529091205483919060ff1661147e57600080fd5b600084815260208190526040902060030154849060ff161561149f57600080fd5b6114a885610b95565b1561127f57600085815260208190526040902060038101805460ff19166001908117909155815490820154600283018054611586936001600160a01b03169291906114f290611e1a565b905084600201805461150390611e1a565b80601f016020809104026020016040519081016040528092919081815260200182805461152f90611e1a565b801561157c5780601f106115515761010080835404028352916020019161157c565b820191906000526020600020905b81548152906001019060200180831161155f57829003601f168201915b5050505050611825565b156115bb5760405186907f33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed7590600090a26115f3565b60405186907f526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b7923690600090a260038101805460ff191690555b505050505050565b8151816032821115801561160f5750818111155b801561161a57508015155b801561162557508115155b61162e57600080fd5b60005b8451811015611715576002600086838151811061165057611650611dbb565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff161580156116b0575060006001600160a01b031685828151811061169c5761169c611dbb565b60200260200101516001600160a01b031614155b6116b957600080fd5b6001600260008784815181106116d1576116d1611dbb565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061170d81611dd1565b915050611631565b508351611729906003906020870190611848565b50505060045550565b6000836001600160a01b03811661174857600080fd5b600554604080516080810182526001600160a01b038881168252602080830189815283850189815260006060860181905287815280845295909520845181546001600160a01b031916941693909317835551600183015592518051949650919390926117bb9260028501929101906118ad565b50606091909101516003909101805460ff191691151591909117905560058054600191906000906117ed908490611e02565b909155505060405182907fc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e5190600090a2509392505050565b6000806040516020840160008287838a8c6187965a03f198975050505050505050565b82805482825590600052602060002090810192821561189d579160200282015b8281111561189d57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611868565b506118a9929150611921565b5090565b8280546118b990611e1a565b90600052602060002090601f0160209004810192826118db576000855561189d565b82601f106118f457805160ff191683800117855561189d565b8280016001018555821561189d579182015b8281111561189d578251825591602001919060010190611906565b5b808211156118a95760008155600101611922565b60006020828403121561194857600080fd5b5035919050565b80356001600160a01b038116811461196657600080fd5b919050565b6000806040838503121561197e57600080fd5b6119878361194f565b946020939093013593505050565b6000602082840312156119a757600080fd5b61129e8261194f565b600080604083850312156119c357600080fd5b823591506119d36020840161194f565b90509250929050565b80151581146119ea57600080fd5b50565b60008060408385031215611a0057600080fd5b8235611a0b816119dc565b91506020830135611a1b816119dc565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a6557611a65611a26565b604052919050565b600080600060608486031215611a8257600080fd5b833567ffffffffffffffff80821115611a9a57600080fd5b818601915086601f830112611aae57600080fd5b8135602082821115611ac257611ac2611a26565b8160051b9250611ad3818401611a3c565b828152928401810192818101908a851115611aed57600080fd5b948201945b84861015611b1257611b038661194f565b82529482019490820190611af2565b9750508701359450611b2b92505060408601905061194f565b90509250925092565b60018060a01b038516815260006020858184015260806040840152845180608085015260005b81811015611b765786810183015185820160a001528201611b5a565b81811115611b8857600060a083870101525b50601f01601f1916830160a0019150611ba79050606083018415159052565b95945050505050565b6020808252825182820181905260009190848201906040850190845b81811015611bf15783516001600160a01b031683529284019291840191600101611bcc565b50909695505050505050565b60008060008060808587031215611c1357600080fd5b84359350602085013592506040850135611c2c816119dc565b91506060850135611c3c816119dc565b939692955090935050565b6020808252825182820181905260009190848201906040850190845b81811015611bf157835183529284019291840191600101611c63565b600080600060608486031215611c9457600080fd5b611c9d8461194f565b92506020808501359250604085013567ffffffffffffffff80821115611cc257600080fd5b818701915087601f830112611cd657600080fd5b813581811115611ce857611ce8611a26565b611cfa601f8201601f19168501611a3c565b91508082528884828501011115611d1057600080fd5b80848401858401376000848284010152508093505050509250925092565b60008060408385031215611d4157600080fd5b611d4a8361194f565b91506119d36020840161194f565b600060208284031215611d6a57600080fd5b5051919050565b600060208284031215611d8357600080fd5b815161129e816119dc565b634e487b7160e01b600052601160045260246000fd5b600082821015611db657611db6611d8e565b500390565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611de557611de5611d8e565b5060010190565b634e487b7160e01b600052603160045260246000fd5b60008219821115611e1557611e15611d8e565b500190565b600181811c90821680611e2e57607f821691505b60208210811415610cb457634e487b7160e01b600052602260045260246000fdfea2646970667358221220358b46619564192abe2c828345119be5af8169270dee0f93d0fdebcda16dcb5764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addOwner(address)": {
        "details": "Allows to add a new owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of new owner."
        }
      },
      "changeRequirement(uint256)": {
        "details": "Allows to change the number of required confirmations. Transaction has to be sent by wallet.",
        "params": {
          "_required": "Number of required confirmations."
        }
      },
      "confirmTransaction(uint256)": {
        "details": "Allows an owner to confirm a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "executeTransaction(uint256)": {
        "details": "Allows anyone to execute a confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "getConfirmationCount(uint256)": {
        "details": "Returns number of confirmations of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "count": "Number of confirmations."
        }
      },
      "getConfirmations(uint256)": {
        "details": "Returns array with owner addresses, which confirmed transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "_confirmations": "Returns array of owner addresses."
        }
      },
      "getOwners()": {
        "details": "Returns list of owners.",
        "returns": {
          "_0": "List of owner addresses."
        }
      },
      "getTransactionCount(bool,bool)": {
        "details": "Returns total number of transactions after filers are applied.",
        "params": {
          "executed": "Include executed transactions.",
          "pending": "Include pending transactions."
        },
        "returns": {
          "count": "Total number of transactions after filters are applied."
        }
      },
      "getTransactionIds(uint256,uint256,bool,bool)": {
        "details": "Returns list of transaction IDs in defined range.",
        "params": {
          "executed": "Include executed transactions.",
          "from": "Index start position of transaction array.",
          "pending": "Include pending transactions.",
          "to": "Index end position of transaction array."
        },
        "returns": {
          "_transactionIds": "Returns array of transaction IDs."
        }
      },
      "isConfirmed(uint256)": {
        "details": "Returns the confirmation status of a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        },
        "returns": {
          "_0": "Confirmation status."
        }
      },
      "removeOwner(address)": {
        "details": "Allows to remove an owner. Transaction has to be sent by wallet.",
        "params": {
          "owner": "Address of owner."
        }
      },
      "replaceOwner(address,address)": {
        "details": "Allows to replace an owner with a new owner. Transaction has to be sent by wallet.",
        "params": {
          "newOwner": "Address of new owner.",
          "owner": "Address of owner to be replaced."
        }
      },
      "revokeConfirmation(uint256)": {
        "details": "Allows an owner to revoke a confirmation for a transaction.",
        "params": {
          "transactionId": "Transaction ID."
        }
      },
      "submitTransaction(address,uint256,bytes)": {
        "details": "Allows an owner to submit and confirm a transaction.",
        "params": {
          "data": "Transaction data payload.",
          "destination": "Transaction target address.",
          "value": "Transaction ether value."
        },
        "returns": {
          "transactionId": "Returns transaction ID."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1312,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "transactions",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(Transaction)1338_storage)"
      },
      {
        "astId": 1318,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "confirmations",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1322,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "isOwner",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1325,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "owners",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1327,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "required",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1329,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "transactionCount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1172,
        "contract": "contracts/Foundation.sol:Foundation",
        "label": "_token",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_struct(Transaction)1338_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct MultiSigWallet.Transaction)",
        "numberOfBytes": "32",
        "value": "t_struct(Transaction)1338_storage"
      },
      "t_struct(Transaction)1338_storage": {
        "encoding": "inplace",
        "label": "struct MultiSigWallet.Transaction",
        "members": [
          {
            "astId": 1331,
            "contract": "contracts/Foundation.sol:Foundation",
            "label": "destination",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1333,
            "contract": "contracts/Foundation.sol:Foundation",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1335,
            "contract": "contracts/Foundation.sol:Foundation",
            "label": "data",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes_storage"
          },
          {
            "astId": 1337,
            "contract": "contracts/Foundation.sol:Foundation",
            "label": "executed",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}