{
  "address": "0x79b303dCB2fFD861e30114FFdEa8f65a92A969cA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ClaimMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "ClaimMintReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "heat",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "len",
          "type": "uint256"
        }
      ],
      "name": "DegreeHeats",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FoundationAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintGNP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeMinters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addSpendNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_number",
          "type": "string"
        }
      ],
      "name": "claimMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daySupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayUnStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "degreeHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destructions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEarthDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destruction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "foundation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalclaimMints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedMesh",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxHeats",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sinceGenesis",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "launchData",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_genesisTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_received",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_staked",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unstaked",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpendNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revenue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalApy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEarnValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offEarthStake",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getStakeTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ts",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_apy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_foundationAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMeshHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rankWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNGPStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unWithDrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userApplys",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "userMints",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "number",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "updateTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNumbers",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "validSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe100026e313db5e6b84115b7a1bf0fa1e3ddcdaef71d54f7d78f234067efdefb",
  "receipt": {
    "to": null,
    "from": "0x75bC9FBD1F907695A5ab823772F78981bE0BFC83",
    "contractAddress": "0x79b303dCB2fFD861e30114FFdEa8f65a92A969cA",
    "transactionIndex": 7,
    "gasUsed": "3137887",
    "logsBloom": "0x
    "blockHash": "0x7b247b67db936f90c41adedb3ecf75a4c4bd65f12c78d060225047bf9c9114c3",
    "transactionHash": "0xe100026e313db5e6b84115b7a1bf0fa1e3ddcdaef71d54f7d78f234067efdefb",
    "logs": [],
    "blockNumber": 8491571,
    "cumulativeGasUsed": "4165050",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11c3c4e2b0baf01c57e348fec1444151",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ClaimMintReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"heat\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"len\",\"type\":\"uint256\"}],\"name\":\"DegreeHeats\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FoundationAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintGNP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addSpendNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_number\",\"type\":\"string\"}],\"name\":\"claimMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"claimMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayUnStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"degreeHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarthDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destruction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalclaimMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMesh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchData\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_genesisTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_received\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_staked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unstaked\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpendNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offEarthStake\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ts\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_foundationAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMeshHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rankWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNGPStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unWithDrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userApplys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"userMints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"number\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"updateTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNumbers\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"validSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NGP.sol\":\"NGP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xb1d9e69cf8073efa574b31b1f840e20709139c19bfb27e60b16393d6073f3d42\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"contracts/NGP.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.8;\\n\\n//import \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n\\ncontract NGP is ERC20Upgradeable {\\n    struct MintInfo {\\n        address user;\\n        string number;\\n        uint256 updateTs;\\n        uint256 withdrawTs;\\n    }\\n\\n    uint256 public daySupply;\\n\\n    mapping(address => mapping(string=>MintInfo)) public userMints;\\n\\n    mapping(string => address[]) public userApplys;\\n \\n    mapping(string => uint256) public degreeHeats;\\n\\n    mapping(address => string[]) public userNumbers;\\n\\n    mapping(address => uint256)  public withdrawAmount;\\n\\n    mapping(address => uint256) public unWithDrawAmount;\\n\\n    mapping(address => uint256)  public rankWithdrawAmount; \\n\\n    mapping(address => bool) private minters;\\n\\n    uint256 private spendNonce;\\n\\n    mapping(address => bool) private isOwner;\\n\\n    address[] private owners;\\n\\n    uint256 private required;\\n\\n    uint256 public  genesisTs;\\n\\n    uint256 public activeMinters;\\n\\n    uint256 public activeNumbers;\\n\\n    uint256 public claimMints;\\n\\n    uint256 public maxMeshHeats;\\n\\n    uint256 public destructions;\\n\\n    uint256 public  SECONDS_IN_DAY;\\n\\n    struct StakeInfo {\\n        uint256 term;\\n        uint256 maturityTs;\\n        uint256 amount;\\n    }\\n\\n    uint256 public apy;\\n\\n    uint256 public activeStakes;\\n    uint256 public totalNGPStaked;\\n\\n    uint256 public totalEarn;\\n\\n    mapping(address => StakeInfo) public userStakes;\\n\\n    mapping(uint256 => uint256) public dayClaims;\\n\\n    mapping(uint256 => bool) public dayClaimed;\\n\\n    uint256 public treasuryValue;\\n\\n    address public FoundationAddr;\\n \\n    mapping(address => uint256) public stakeValues;\\n\\n    //\\u5f53\\u65e5\\u94f8\\u9020NGP\\n    mapping(uint256 => uint256) public dayReceived;\\n\\n    //\\u5f53\\u65e5\\u8d28\\u62bcNGP\\n    mapping(uint256 => uint256) public dayStaked;\\n\\n    //\\u5f53\\u65e5\\u89e3\\u9501NGP\\n    mapping(uint256 => uint256) public dayUnStaked;\\n\\n    event ClaimMint(address user,string number,uint256 time);\\n\\n    event ClaimMintReward(address user,string number,uint256 time);\\n\\n    event Staked(address indexed user, uint256 amount, uint256 term);\\n\\n    event Withdrawn(address indexed user, uint256 amount, uint256 reward);\\n\\n    event DegreeHeats(string number,uint256 heat,uint256 len);\\n\\n    modifier isOnlyOwner {\\n        require(isOwner[msg.sender],\\\"not owner\\\");\\n        _;\\n    }\\n\\n    function initialize(address[] calldata _owners,uint256 _apy,address _foundationAddr) external initializer {\\n        __ERC20_init(\\\"EARTH Token\\\",\\\"EARTH\\\");\\n        for (uint i = 0; i < _owners.length; i++) {\\n            //onwer should be distinct, and non-zero\\n            address _owner  = _owners[i];\\n            if (isOwner[_owner] || _owner == address(0x0)) {\\n                revert();\\n            }\\n           \\n            isOwner[_owner] = true;\\n            owners.push(_owner);\\n        }\\n\\n        required = _owners.length/2 + 1;\\n\\n        SECONDS_IN_DAY = 3_600 * 24;\\n\\n        genesisTs = block.timestamp;\\n\\n        apy = _apy;\\n\\n        FoundationAddr = _foundationAddr;\\n    }\\n\\n    //\\u8fdb\\u884cNGP\\u7684mint,\\u9700\\u8981\\u4f20\\u5165\\u7f16\\u53f7\\n    //1. \\u540c\\u4e00\\u4e2a\\u5750\\u6807\\u8303\\u56f4\\uff0c\\u4e00\\u4e2a\\u94b1\\u5305\\u5730\\u5740\\u53ea\\u80fd\\u7ed1\\u5b9a\\u4e00\\u6b21\\n    //2. \\u5982\\u679c\\u7528\\u6237\\u7533\\u660e\\u7684\\u7f51\\u683c\\u5df2\\u88ab\\u5176\\u5b83\\u7528\\u6237\\u7533\\u660e\\u5360\\u9886\\u8fc7\\u7684\\u8bdd\\uff0c\\u9700\\u8981\\u71c3\\u70e7\\n    function claimMint(string memory _number) external {\\n        MintInfo memory mintInfo = userMints[msg.sender][_number];\\n\\n        require(mintInfo.updateTs == 0, \\\"mNGP: Mint already in progress\\\");\\n\\n        uint256 _len = userApplys[_number].length;\\n        if( _len != 0) {\\n            uint256 _amount = degreeHeats[_number] / 10;\\n            destructions += _amount;\\n\\n            _burn(msg.sender, _amount);\\n        }else{\\n            activeNumbers++;\\n        }\\n\\n        mintInfo.number = _number;\\n        mintInfo.user = msg.sender;\\n        mintInfo.updateTs = block.timestamp;\\n        mintInfo.withdrawTs = block.timestamp;\\n        userMints[msg.sender][_number] = mintInfo;\\n\\n        for(uint256 i = 0;i < userApplys[_number].length;i++){\\n            address _user = userApplys[_number][i];\\n            uint256 _day = (block.timestamp - userMints[_user][_number].withdrawTs) / SECONDS_IN_DAY;\\n            uint256 _withAmount =  _day * 6667 / _len;\\n\\n            //\\u7528\\u6237\\u5f53\\u65e5\\u7684\\u7f51\\u683c\\u6316\\u77ff\\u6536\\u76ca\\u4e00\\u76f4\\u672a\\u88ab\\u9886\\u53d6\\u7684\\u8bdd\\uff0c\\u5c06\\u6bcf\\u8fc724\\u5c0f\\u65f6\\u8870\\u51cf\\u4e00\\u6b21\\uff0c\\u6bcf\\u6b21\\u8870\\u51cf50%\\u3002\\n            _withAmount =  _withAmount * (2 - 1/(2 ** (_day - 1)));\\n            userMints[_user][_number].withdrawTs = block.timestamp;\\n\\n            withdrawAmount[_user] += _withAmount;\\n        }\\n\\n        userApplys[_number].push(msg.sender);\\n\\n        //\\u5e73\\u5747\\u6536\\u76ca\\u503c: 864,000 / 12,960,000,0 = 0.0006667\\n        uint256 _n = userApplys[_number].length;\\n\\n        uint256 _degreeHeats = 6667 * (106 ** _n / 100 ** _n);\\n\\n        degreeHeats[_number]  = _degreeHeats;\\n\\n        emit DegreeHeats(_number,_degreeHeats,_n);\\n\\n        if(_degreeHeats > maxMeshHeats) {\\n            maxMeshHeats = _degreeHeats;\\n        }\\n        \\n        userNumbers[msg.sender].push(_number);\\n\\n        if(!minters[msg.sender]) {\\n            activeMinters++;\\n\\n            minters[msg.sender] = true;\\n        }\\n\\n        uint256 _today = block.timestamp / SECONDS_IN_DAY; \\n        if(!dayClaimed[_today-1] && block.timestamp >= genesisTs + SECONDS_IN_DAY * 3) {\\n            treasuryValue += ((6667 - dayClaims[_today-2]) + (129600000 - activeNumbers) * 6667) * 10 ** 11;\\n\\n            dayClaimed[_today-1] = true;\\n        }\\n\\n        claimMints++;\\n\\n        emit ClaimMint(msg.sender,_number,block.timestamp);\\n    }\\n\\n    //_amount:\\u662f\\u7ebf\\u4e0b\\u8ba1\\u7b97\\u768480%\\u90e8\\u5206\\u7684\\u5956\\u52b1 + 2\\u90e8\\u5206\\u7684\\u5956\\u52b1\\n    function claimMintReward(address _user,uint256 _amount,uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public isOnlyOwner  {\\n        require(validSignature(_user,vs, rs, ss), \\\"invalid signatures\\\");\\n        spendNonce = spendNonce + 1;\\n\\n        uint256 _totalAmount = 0;\\n\\n        uint256 _today = block.timestamp / SECONDS_IN_DAY; \\n\\n        //\\u6bcf\\u592910%\\u90e8\\u5206\\u6536\\u76ca\\n        for(uint256 i = 0;i < userNumbers[_user].length;i++){\\n            string memory _number = userNumbers[_user][i];\\n            uint256 _len = userApplys[_number].length;\\n\\n            uint256 _day = (block.timestamp - userMints[_user][_number].withdrawTs) / SECONDS_IN_DAY;\\n\\n            uint256 _value = _day * 6667 /_len;\\n\\n            if(_day >= 1) {\\n                dayClaims[_today-1] += _value;\\n            }\\n\\n            //\\u7528\\u6237\\u5f53\\u65e5\\u7684\\u7f51\\u683c\\u6316\\u77ff\\u6536\\u76ca\\u4e00\\u76f4\\u672a\\u88ab\\u9886\\u53d6\\u7684\\u8bdd\\uff0c\\u5c06\\u6bcf\\u8fc724\\u5c0f\\u65f6\\u8870\\u51cf\\u4e00\\u6b21\\uff0c\\u6bcf\\u6b21\\u8870\\u51cf50%\\u3002\\n            _totalAmount +=  _value * (2 - 1/(2 ** (_day - 1)));\\n\\n            userMints[_user][_number].withdrawTs = block.timestamp;\\n\\n            emit ClaimMintReward(msg.sender,_number,block.timestamp);\\n        }\\n\\n        if(!dayClaimed[_today-1] && block.timestamp >= genesisTs + SECONDS_IN_DAY * 3) {\\n            uint256 _tValue = ((6667 - dayClaims[_today-2]) + (129600000 - activeNumbers) * 6667) * 10 ** 11;\\n            treasuryValue += _tValue;\\n\\n            mint(FoundationAddr, _tValue/5);\\n\\n            dayClaimed[_today-1] = true;\\n        }\\n\\n        //10%\\u90e8\\u5206\\n        //_reward\\u6709\\u4e2a\\u7cbe\\u5ea6\\uff0c10 ** 11,0.0006667\\u4e2a\\n        uint256 _reward = (_totalAmount + withdrawAmount[_user]) * 10 /100 * 10 ** 11;\\n\\n        uint256 _unReward = (_totalAmount + withdrawAmount[_user]) * 90 /100;\\n        unWithDrawAmount[msg.sender] = _unReward;\\n\\n        mint(_user,_reward + _amount );\\n\\n        withdrawAmount[_user] = 0;\\n    }\\n\\n    function stake(uint256 amount, uint256 term) external {\\n        require(balanceOf(msg.sender) >= amount, \\\"NGP: not enough balance\\\");\\n        require(amount > 0, \\\"NGP: amount > 0\\\");\\n        require(term  >= 1, \\\"NGP: term >= 1\\\"); \\n        require(userStakes[msg.sender].amount == 0, \\\"NGP: stake exists\\\"); // \\u5df2\\u7ecf\\u8d28\\u62bc\\u8fc7\\u4e86\\n\\n        // burn staked NGP\\n        _burn(msg.sender, amount);  // \\u70e7\\u6389\\u4e00\\u4e9b token \\n        // create NGP Stake\\n        _createStake(amount, term);   // \\u521b\\u5efa\\u8d28\\u62bc\\u6570\\u636e  \\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        dayStaked[_today] += amount;\\n\\n        emit Staked(msg.sender, amount, term);\\n    }\\n\\n    function withdraw() external {\\n        StakeInfo memory userStake = userStakes[msg.sender];\\n        require(userStake.amount > 0, \\\"NGP: no stake exists\\\");\\n        // \\u8ba1\\u7b97\\u8d28\\u62bc\\u5956\\u52b1\\n        uint256 ngpReward = _calculateStakeReward(\\n            userStake.amount,\\n            userStake.term,\\n            userStake.maturityTs\\n        );\\n\\n        uint256 unLockValue = userStake.amount + ngpReward;\\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        stakeValues[msg.sender] += ngpReward;\\n\\n        totalEarn += ngpReward;\\n\\n        activeStakes--;\\n        totalNGPStaked -= userStake.amount;\\n\\n        dayUnStaked[_today] += unLockValue;\\n\\n        mint(msg.sender, unLockValue);\\n        emit Withdrawn(msg.sender, userStake.amount, ngpReward);\\n        delete userStakes[msg.sender];\\n    }\\n\\n    function _calculateStakeReward(\\n        uint256 amount,\\n        uint256 term,\\n        uint256 maturityTs\\n    ) private view returns (uint256) {\\n        if (block.timestamp > maturityTs) { \\n            uint256 rate = apy * term;   // apy*\\u5929\\u6570*1000/365 \\n            return (amount * rate) / 10000;   // \\u8d28\\u62bc\\u7684\\u6570\\u91cf * rate / 100_000_000 \\n        }\\n        return 0;\\n    }\\n\\n    function _createStake(uint256 amount, uint256 term) private {\\n        userStakes[msg.sender] = StakeInfo({\\n            term: term,        // \\u5929\\u6570\\n            maturityTs: block.timestamp + term * SECONDS_IN_DAY, // \\u5230\\u671f\\u65f6\\u95f4\\n            amount: amount  // \\u6570\\u91cf\\n        });\\n\\n        activeStakes++;     // \\u6d3b\\u8dc3\\u8d28\\u62bc\\u8005\\u6570\\u91cf\\n        totalNGPStaked += amount; // \\u603b\\u7684\\u8d28\\u62bc\\u6570\\u91cf\\n    }\\n\\n    function validSignature(address _sender,uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public view returns (bool) {\\n        require(vs.length == rs.length,\\\"vs.length == rs.length\\\");\\n        require(rs.length == ss.length,\\\"rs.length == ss.length\\\");\\n        require(vs.length <= owners.length,\\\"vs.length <= owners.length\\\");\\n        require(vs.length >= required,\\\"vs.length >= required\\\");\\n        bytes32 message = _messageToRecover(_sender);\\n        address[] memory addrs = new address[](vs.length);\\n        for (uint i = 0; i < vs.length; i++) {\\n            //recover the address associated with the public key from elliptic curve signature or return zero on error\\n            addrs[i] = ecrecover(message, vs[i]+27, rs[i], ss[i]);\\n        }\\n       \\n        require(_distinctOwners(addrs),\\\"_distinctOwners\\\");\\n        return true;\\n    }\\n\\n    function _messageToRecover(address _sender) private view returns (bytes32) {\\n        bytes32 hashedUnsignedMessage = generateMessageToSign(_sender);\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\\n    }\\n\\n    function generateMessageToSign(address _sender) private view returns (bytes32) {\\n        //the sequence should match generateMultiSigV2 in JS\\n        bytes32 message = keccak256(abi.encodePacked(_sender,block.chainid,spendNonce));\\n        return message;\\n    }\\n\\n    function _distinctOwners(address[] memory addrs) private view returns (bool) {\\n        if (addrs.length > owners.length) {\\n            return false;\\n        }\\n        for (uint i = 0; i < addrs.length; i++) {\\n            if (!isOwner[addrs[i]]) {\\n                return false;\\n            }\\n            //address should be distinct\\n            for (uint j = 0; j < i; j++) {\\n                if (addrs[i] == addrs[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getSpendNonce() external view returns (uint256) {\\n        return spendNonce;\\n    }\\n\\n    function addSpendNonce() external  {\\n        spendNonce++;\\n    }  \\n\\n    function getMeshData() view external returns(uint256 userCounts,uint256 launchData,uint256 totalMinted,uint256 liquidSupply) {\\n        userCounts = activeMinters;\\n        launchData = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n        totalMinted = totalSupply();\\n        liquidSupply = totalMinted - balanceOf(address(this));\\n    }\\n\\n    function getMeshDashboard() view external returns (uint256 participants,uint256 totalclaimMints,uint256 claimedMesh,uint256 maxHeats,uint256 sinceGenesis) {\\n        participants = activeMinters;\\n        totalclaimMints = claimMints;\\n        claimedMesh = activeNumbers;\\n        maxHeats = maxMeshHeats;\\n        sinceGenesis = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n    }\\n\\n    function getEarthDashboard() view external returns (uint256 _totalSupply,uint256 liquidSupply,uint256 destruction,uint256 totalStaked,uint256 treasury,uint256 foundation) {\\n        _totalSupply = totalSupply();\\n        liquidSupply = _totalSupply - balanceOf(address(this));\\n        destruction = destructions;\\n        totalStaked = totalNGPStaked;\\n        treasury = treasuryValue;\\n        foundation = balanceOf(FoundationAddr);\\n    }\\n\\n    function getStakeInfo(address _user) view external returns (uint256 tvl,uint256 revenue,uint256 earned,uint256 claimable,uint256 totalApy,uint256 staked,uint256 totalEarnValue,uint256 offEarthStake) {\\n        tvl = totalNGPStaked * 1/5;\\n        revenue = totalEarn * 1/5;\\n        earned = totalEarn;\\n        if(userStakes[_user].maturityTs >= block.timestamp) {\\n            claimable = userStakes[_user].amount;\\n        }else{\\n            claimable = 0;\\n        }\\n\\n        totalApy = apy;\\n\\n        staked = userStakes[_user].amount;\\n\\n        totalEarnValue = stakeValues[_user];\\n        //\\u5f53\\u524d\\u8d28\\u62bc\\u9501\\u5b9aEARTH\\u6570\\u91cf / \\u5df2\\u7ecf\\u7d2f\\u8ba1\\u94f8\\u9020\\u51fa\\u6765\\u7684EARTH\\u603b\\u6570\\u91cf\\u3002\\n        offEarthStake = totalNGPStaked /  totalSupply();\\n    } \\n\\n    function mint(address user,uint256 amount) private {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        dayReceived[_today] += amount;\\n        _mint(user, amount);\\n    }\\n\\n    function getNetworkEvents() view external returns(uint256 _genesisTs,uint256[] memory _received,uint256[] memory _staked,uint256[] memory _unstaked) {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n        _received = new uint256[](_today);\\n        _staked = new uint256[](_today);\\n        _unstaked = new uint256[](_today);\\n\\n        _genesisTs = genesisTs;\\n\\n        for(uint256 i = 0;i < _today;i++){\\n            _received[i] = dayReceived[i];\\n            _staked[i] = dayStaked[i];\\n            _unstaked[i] = dayUnStaked[i];\\n        }\\n    }\\n\\n    function MintGNP(address user,uint256 amount) public {\\n        _mint(user, amount);\\n    }\\n\\n    function getStakeTime(address user) view external returns(uint256 ts) {\\n        if(userStakes[user].amount == 0){\\n            ts = 0;\\n        }\\n\\n        ts = userStakes[user].maturityTs;\\n    } \\n}\",\"keccak256\":\"0x99901e0b619ba15cfba3146f9cc6ac4ace462619e46fbea96150807ba7c021b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103425760003560e01c8063890d3b27116101b8578063c345315311610104578063e3c41c4e116100a2578063ed2f23691161007c578063ed2f2369146107fb578063f01d110c14610804578063f9a18ba51461080d578063fb1c8b9f1461082d57600080fd5b8063e3c41c4e14610798578063e9cabce7146107c8578063ebcdbc2d146107db57600080fd5b8063cb92ef4a116100de578063cb92ef4a14610753578063dd62ed3e14610773578063dffd722f14610786578063e3af6d0a1461078f57600080fd5b8063c3453153146106dd578063c6a2a9f11461072b578063cb48e3c61461073357600080fd5b8063a673471511610171578063b4800cdc1161014b578063b4800cdc14610679578063bcfd8dbf14610682578063c18fab1414610695578063c293d09b146106ca57600080fd5b8063a673471514610635578063a6a5ff921461063e578063a9059cbb1461066657600080fd5b8063890d3b27146105845780638da7ad23146105af5780638ed4064a146105f9578063903993181461060257806395d89b411461061a578063a457c2d71461062257600080fd5b80633adfe5ea116102925780635f7bb9321161023057806370a082311161020a57806370a082311461052257806372483bf91461054b5780637b0472f01461055e5780638283cef61461057157600080fd5b80635f7bb932146104d657806361a52a36146104f65780636e5d8280146104ff57600080fd5b80633d7af48f1161026c5780633d7af48f146104915780634c2346fa1461049a5780634f420151146104ad5780635cad385c146104cd57600080fd5b80633adfe5ea146104785780633bcfc4b8146104805780633ccfd60b1461048957600080fd5b806318160ddd116102ff57806323b872dd116102d957806323b872dd146104235780632c2d0a0c14610436578063313ce56714610456578063395093511461046557600080fd5b806318160ddd146103e75780631c02b1f4146103ef5780631dca03bc146103f857600080fd5b806306fdde0314610347578063095ea7b3146103655780630aedb5ba146103885780630bfbba011461039f5780630ffcccff146103b257806313066240146103d2575b600080fd5b61034f610850565b60405161035c9190612e7d565b60405180910390f35b610378610373366004612eac565b6108e2565b604051901515815260200161035c565b61039160655481565b60405190815260200161035c565b61034f6103ad366004612eac565b6108fc565b6103916103c0366004612ed6565b60836020526000908152604090205481565b6103e56103e0366004612fa4565b6109b5565b005b603554610391565b61039160765481565b610391610406366004612fa4565b805160208183018101805160688252928201919093012091525481565b610378610431366004612fe0565b6110ad565b610391610444366004612ed6565b60856020526000908152604090205481565b6040516012815260200161035c565b610378610473366004612eac565b6110d3565b6103e56110f5565b61039160795481565b6103e561110c565b61039160745481565b6103786104a8366004613115565b6112d3565b6103916104bb3660046131ad565b606a6020526000908152604090205481565b61039160775481565b6103916104e43660046131ad565b60826020526000908152604090205481565b61039160785481565b61037861050d366004612ed6565b607f6020526000908152604090205460ff1681565b6103916105303660046131ad565b6001600160a01b031660009081526033602052604090205490565b6103e56105593660046131c8565b6115b7565b6103e561056c366004613253565b611838565b6103e561057f366004612eac565b611a0a565b608154610597906001600160a01b031681565b6040516001600160a01b03909116815260200161035c565b6105de6105bd3660046131ad565b607d6020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161035c565b610391607b5481565b61060a611a18565b60405161035c94939291906132b0565b61034f611bc6565b610378610630366004612eac565b611bd5565b61039160755481565b610646611c5b565b60408051948552602085019390935291830152606082015260800161035c565b610378610674366004612eac565b611cb1565b61039160735481565b6103916106903660046131ad565b611cbf565b61069d611d02565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161035c565b6105976106d83660046132fa565b611d67565b6106f06106eb3660046131ad565b611dae565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161035c565b606e54610391565b6103916107413660046131ad565b606b6020526000908152604090205481565b610391610761366004612ed6565b607e6020526000908152604090205481565b61039161078136600461333e565b611e99565b610391607c5481565b61039160725481565b6107a0611ec4565b604080519586526020860194909452928401919091526060830152608082015260a00161035c565b6103e56107d6366004613371565b611ef7565b6103916107e9366004612ed6565b60846020526000908152604090205481565b610391607a5481565b61039160805481565b61039161081b3660046131ad565b606c6020526000908152604090205481565b61084061083b366004613413565b612422565b60405161035c9493929190613460565b60606036805461085f90613497565b80601f016020809104026020016040519081016040528092919081815260200182805461088b90613497565b80156108d85780601f106108ad576101008083540402835291602001916108d8565b820191906000526020600020905b8154815290600101906020018083116108bb57829003601f168201915b5050505050905090565b6000336108f08185856124f9565b60019150505b92915050565b6069602052816000526040600020818154811061091857600080fd5b9060005260206000200160009150915050805461093490613497565b80601f016020809104026020016040519081016040528092919081815260200182805461096090613497565b80156109ad5780601f10610982576101008083540402835291602001916109ad565b820191906000526020600020905b81548152906001019060200180831161099057829003601f168201915b505050505081565b3360009081526066602052604080822090516109d29084906134d2565b9081526040805191829003602090810183206080840190925281546001600160a01b0316835260018201805491840191610a0b90613497565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3790613497565b8015610a845780601f10610a5957610100808354040283529160200191610a84565b820191906000526020600020905b815481529060010190602001808311610a6757829003601f168201915b505050505081526020016002820154815260200160038201548152505090508060400151600014610afc5760405162461bcd60e51b815260206004820152601e60248201527f6d4e47503a204d696e7420616c726561647920696e2070726f6772657373000060448201526064015b60405180910390fd5b6000606783604051610b0e91906134d2565b9081526040519081900360200190205490508015610b7d576000600a606885604051610b3a91906134d2565b908152602001604051809103902054610b539190613504565b90508060776000828254610b679190613526565b90915550610b779050338261261e565b50610b93565b60748054906000610b8d8361353e565b91905055505b6020808301849052338084524260408086018290526060860191909152600091825260669092528190209051839190610bcd9086906134d2565b90815260405160209181900382019020825181546001600160a01b0319166001600160a01b039091161781558282015180519192610c1392600185019290910190612d8c565b506040820151600282015560609091015160039091015560005b606784604051610c3d91906134d2565b90815260405190819003602001902054811015610dcd576000606785604051610c6691906134d2565b90815260200160405180910390208281548110610c8557610c85613559565b60009182526020808320909101546078546001600160a01b039091168084526066909252604080842090519294509091610cc09089906134d2565b90815260200160405180910390206003015442610cdd919061356f565b610ce79190613504565b9050600084610cf883611a0b613586565b610d029190613504565b9050610d0f60018361356f565b610d1a906002613689565b610d25906001613504565b610d3090600261356f565b610d3a9082613586565b6001600160a01b0384166000908152606660205260409081902090519192504291610d66908a906134d2565b90815260200160405180910390206003018190555080606a6000856001600160a01b03166001600160a01b031681526020019081526020016000206000828254610db09190613526565b925050819055505050508080610dc59061353e565b915050610c2d565b50606783604051610dde91906134d2565b90815260405190819003602090810182208054600181018255600091825291812090910180546001600160a01b0319163317905590606790610e219086906134d2565b9081526040519081900360200190205490506000610e40826064613689565b610e4b83606a613689565b610e559190613504565b610e6190611a0b613586565b905080606886604051610e7491906134d2565b9081526020016040518091039020819055507fe5c486bee358a5fff5e4d70dc5fdaaf14806df125ffde843a8c40db608264812858284604051610eb993929190613695565b60405180910390a1607654811115610ed15760768190555b33600090815260696020908152604082208054600181018255908352918190208751610f04939190910191880190612d8c565b50336000908152606d602052604090205460ff16610f4c5760738054906000610f2c8361353e565b9091555050336000908152606d60205260409020805460ff191660011790555b600060785442610f5c9190613504565b9050607f6000610f6d60018461356f565b815260208101919091526040016000205460ff16158015610fa85750607854610f97906003613586565b607254610fa49190613526565b4210155b1561105557607454610fbe906307b98a0061356f565b610fca90611a0b613586565b607e6000610fd960028561356f565b815260200190815260200160002054611a0b610ff5919061356f565b610fff9190613526565b61100e9064174876e800613586565b6080600082825461101f9190613526565b9091555060019050607f6000611035838561356f565b81526020810191909152604001600020805460ff19169115159190911790555b607580549060006110658361353e565b91905055507f1309ab74031e37b46ee8ce9ff667a17a5c69a500a05d167e4c89ad8b0bc40bf933874260405161109d939291906136ba565b60405180910390a1505050505050565b6000336110bb85828561274f565b6110c68585856127c9565b60019150505b9392505050565b6000336108f08185856110e68383611e99565b6110f09190613526565b6124f9565b606e80549060006111058361353e565b9190505550565b336000908152607d602090815260409182902082516060810184528154815260018201549281019290925260020154918101829052906111855760405162461bcd60e51b81526020600482015260146024820152734e47503a206e6f207374616b652065786973747360601b6044820152606401610af3565b600061119e826040015183600001518460200151612974565b905060008183604001516111b29190613526565b90506000607854607254426111c7919061356f565b6111d19190613504565b336000908152608260205260408120805492935085929091906111f5908490613526565b9250508190555082607c600082825461120e9190613526565b9091555050607a8054906000611223836136ee565b91905055508360400151607b600082825461123e919061356f565b909155505060008181526085602052604081208054849290611261908490613526565b90915550611271905033836129b9565b60408085015181519081526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050336000908152607d6020526040812081815560018101829055600201555050565b6000825184511461131f5760405162461bcd60e51b81526020600482015260166024820152750ece65cd8cadccee8d0407a7a40e4e65cd8cadccee8d60531b6044820152606401610af3565b81518351146113695760405162461bcd60e51b81526020600482015260166024820152750e4e65cd8cadccee8d0407a7a40e6e65cd8cadccee8d60531b6044820152606401610af3565b607054845111156113bc5760405162461bcd60e51b815260206004820152601a60248201527f76732e6c656e677468203c3d206f776e6572732e6c656e6774680000000000006044820152606401610af3565b607154845110156114075760405162461bcd60e51b81526020600482015260156024820152741d9ccb9b195b99dd1a080f8f481c995c5d5a5c9959605a1b6044820152606401610af3565b600061141286612a0b565b9050600085516001600160401b0381111561142f5761142f612eef565b604051908082528060200260200182016040528015611458578160200160208202803683370190505b50905060005b86518110156115625760018388838151811061147c5761147c613559565b6020026020010151601b6114909190613705565b8884815181106114a2576114a2613559565b60200260200101518885815181106114bc576114bc613559565b6020026020010151604051600081526020016040526040516114fa949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa15801561151c573d6000803e3d6000fd5b5050506020604051035182828151811061153857611538613559565b6001600160a01b03909216602092830291909101909101528061155a8161353e565b91505061145e565b5061156c81612acd565b6115aa5760405162461bcd60e51b815260206004820152600f60248201526e5f64697374696e63744f776e65727360881b6044820152606401610af3565b5060019695505050505050565b600054610100900460ff16158080156115d75750600054600160ff909116105b806115f15750303b1580156115f1575060005460ff166001145b6116545760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610af3565b6000805460ff191660011790558015611677576000805461ff0019166101001790555b6116c16040518060400160405280600b81526020016a22a0a92a24102a37b5b2b760a91b8152506040518060400160405280600581526020016408a82a4a8960db1b815250612bc8565b60005b848110156117a65760008686838181106116e0576116e0613559565b90506020020160208101906116f591906131ad565b6001600160a01b0381166000908152606f602052604090205490915060ff168061172657506001600160a01b038116155b1561173057600080fd5b6001600160a01b03166000818152606f60205260408120805460ff191660019081179091556070805491820181559091527f8f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b0180546001600160a01b03191690911790558061179e8161353e565b9150506116c4565b506117b2600285613504565b6117bd906001613526565b60715562015180607855426072556079839055608180546001600160a01b0319166001600160a01b0384161790558015611831576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b336000908152603360205260409020548211156118975760405162461bcd60e51b815260206004820152601760248201527f4e47503a206e6f7420656e6f7567682062616c616e63650000000000000000006044820152606401610af3565b600082116118d95760405162461bcd60e51b815260206004820152600f60248201526e04e47503a20616d6f756e74203e203608c1b6044820152606401610af3565b600181101561191b5760405162461bcd60e51b815260206004820152600e60248201526d4e47503a207465726d203e3d203160901b6044820152606401610af3565b336000908152607d60205260409020600201541561196f5760405162461bcd60e51b81526020600482015260116024820152704e47503a207374616b652065786973747360781b6044820152606401610af3565b611979338361261e565b6119838282612bf9565b600060785460725442611996919061356f565b6119a09190613504565b9050826084600083815260200190815260200160002060008282546119c59190613526565b9091555050604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2505050565b611a148282612c81565b5050565b60006060806060600060785460725442611a32919061356f565b611a3c9190613504565b9050806001600160401b03811115611a5657611a56612eef565b604051908082528060200260200182016040528015611a7f578160200160208202803683370190505b509350806001600160401b03811115611a9a57611a9a612eef565b604051908082528060200260200182016040528015611ac3578160200160208202803683370190505b509250806001600160401b03811115611ade57611ade612eef565b604051908082528060200260200182016040528015611b07578160200160208202803683370190505b509150607254945060005b81811015611bbe576000818152608360205260409020548551869083908110611b3d57611b3d613559565b6020026020010181815250506084600082815260200190815260200160002054848281518110611b6f57611b6f613559565b6020026020010181815250506085600082815260200190815260200160002054838281518110611ba157611ba1613559565b602090810291909101015280611bb68161353e565b915050611b12565b505090919293565b60606037805461085f90613497565b60003381611be38286611e99565b905083811015611c435760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610af3565b611c5082868684036124f9565b506001949350505050565b600080600080607354935060785460725442611c77919061356f565b611c819190613504565b9250611c8c60355490565b30600090815260336020526040902054909250611ca9908361356f565b905090919293565b6000336108f08185856127c9565b6001600160a01b0381166000908152607d6020526040812060020154611ce3575060005b506001600160a01b03166000908152607d602052604090206001015490565b600080600080600080611d1460355490565b30600090815260336020526040902054909650611d31908761356f565b607754607b546080546081546001600160a01b0316600090815260336020526040902054999a9399929850909650945092509050565b81516020818401810180516067825292820191850191909120919052805482908110611d9257600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000806000806000806000806005607b546001611dcb9190613586565b611dd59190613504565b97506005607c546001611de89190613586565b611df29190613504565b607c546001600160a01b038b166000908152607d602052604090206001015491985096504211611e3f576001600160a01b0389166000908152607d60205260409020600201549450611e44565b600094505b6079546001600160a01b038a166000908152607d602090815260408083206002015460829092529091205491955093509150611e7f60355490565b607b54611e8c9190613504565b9050919395975091939597565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60735460755460745460765460785460725460009190611ee4904261356f565b611eee9190613504565b90509091929394565b336000908152606f602052604090205460ff16611f425760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b6044820152606401610af3565b611f4e858484846112d3565b611f8f5760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b6044820152606401610af3565b606e54611f9d906001613526565b606e556078546000908190611fb29042613504565b905060005b6001600160a01b038816600090815260696020526040902054811015612235576001600160a01b038816600090815260696020526040812080548390811061200157612001613559565b90600052602060002001805461201690613497565b80601f016020809104026020016040519081016040528092919081815260200182805461204290613497565b801561208f5780601f106120645761010080835404028352916020019161208f565b820191906000526020600020905b81548152906001019060200180831161207257829003601f168201915b5050505050905060006067826040516120a891906134d2565b9081526040805160209281900383018120546078546001600160a01b038f1660009081526066909552928420909450906120e39086906134d2565b90815260200160405180910390206003015442612100919061356f565b61210a9190613504565b905060008261211b83611a0b613586565b6121259190613504565b9050600182106121625780607e600061213f60018a61356f565b8152602001908152602001600020600082825461215c9190613526565b90915550505b61216d60018361356f565b612178906002613689565b612183906001613504565b61218e90600261356f565b6121989082613586565b6121a29088613526565b6001600160a01b038d1660009081526066602052604090819020905191985042916121ce9087906134d2565b9081526020016040518091039020600301819055507ff498e0b0d0e3ef52fe21a90b9ea81effdeee405ca5fd31bf66845b803a495986338542604051612216939291906136ba565b60405180910390a150505050808061222d9061353e565b915050611fb7565b50607f600061224560018461356f565b815260208101919091526040016000205460ff16158015612280575060785461226f906003613586565b60725461227c9190613526565b4210155b156123535760006074546307b98a00612299919061356f565b6122a590611a0b613586565b607e60006122b460028661356f565b815260200190815260200160002054611a0b6122d0919061356f565b6122da9190613526565b6122e99064174876e800613586565b905080608060008282546122fd9190613526565b9091555050608154612322906001600160a01b031661231d600584613504565b6129b9565b6001607f6000612332838661356f565b81526020810191909152604001600020805460ff1916911515919091179055505b6001600160a01b0387166000908152606a60205260408120546064906123799085613526565b61238490600a613586565b61238e9190613504565b61239d9064174876e800613586565b6001600160a01b0389166000908152606a6020526040812054919250906064906123c79086613526565b6123d290605a613586565b6123dc9190613504565b336000908152606b6020526040902081905590506123fe8961231d8a85613526565b5050506001600160a01b039095166000908152606a60205260408120555050505050565b60666020908152600092835260409092208151808301840180519281529084019290930191909120915280546001820180546001600160a01b03909216929161246a90613497565b80601f016020809104026020016040519081016040528092919081815260200182805461249690613497565b80156124e35780601f106124b8576101008083540402835291602001916124e3565b820191906000526020600020905b8154815290600101906020018083116124c657829003601f168201915b5050505050908060020154908060030154905084565b6001600160a01b03831661255b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610af3565b6001600160a01b0382166125bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610af3565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03821661267e5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610af3565b6001600160a01b038216600090815260336020526040902054818110156126f25760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610af3565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612611565b505050565b600061275b8484611e99565b905060001981146127c357818110156127b65760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610af3565b6127c384848484036124f9565b50505050565b6001600160a01b03831661282d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610af3565b6001600160a01b03821661288f5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610af3565b6001600160a01b038316600090815260336020526040902054818110156129075760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610af3565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906129679086815260200190565b60405180910390a36127c3565b6000814211156129af5760008360795461298e9190613586565b905061271061299d8287613586565b6129a79190613504565b9150506110cc565b5060009392505050565b6000607854607254426129cc919061356f565b6129d69190613504565b9050816083600083815260200190815260200160002060008282546129fb9190613526565b9091555061274a90508383612c81565b600080612a5f83606e546040805160609390931b6bffffffffffffffffffffffff19166020808501919091524660348501526054808501939093528151808503909301835260749093019052805191012090565b905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090508082604051602001612aae92919061372a565b6040516020818303038152906040528051906020012092505050919050565b60705481516000911015612ae357506000919050565b60005b8251811015612bbf57606f6000848381518110612b0557612b05613559565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff16612b395750600092915050565b60005b81811015612bac57838181518110612b5657612b56613559565b60200260200101516001600160a01b0316848381518110612b7957612b79613559565b60200260200101516001600160a01b03161415612b9a575060009392505050565b80612ba48161353e565b915050612b3c565b5080612bb78161353e565b915050612ae6565b50600192915050565b600054610100900460ff16612bef5760405162461bcd60e51b8152600401610af39061374c565b611a148282612d42565b604051806060016040528082815260200160785483612c189190613586565b612c229042613526565b81526020908101849052336000908152607d82526040808220845181559284015160018401559290920151600290910155607a805491612c618361353e565b919050555081607b6000828254612c789190613526565b90915550505050565b6001600160a01b038216612cd75760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610af3565b8060356000828254612ce99190613526565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600054610100900460ff16612d695760405162461bcd60e51b8152600401610af39061374c565b8151612d7c906036906020850190612d8c565b50805161274a9060379060208401905b828054612d9890613497565b90600052602060002090601f016020900481019282612dba5760008555612e00565b82601f10612dd357805160ff1916838001178555612e00565b82800160010185558215612e00579182015b82811115612e00578251825591602001919060010190612de5565b50612e0c929150612e10565b5090565b5b80821115612e0c5760008155600101612e11565b60005b83811015612e40578181015183820152602001612e28565b838111156127c35750506000910152565b60008151808452612e69816020860160208601612e25565b601f01601f19169290920160200192915050565b6020815260006110cc6020830184612e51565b80356001600160a01b0381168114612ea757600080fd5b919050565b60008060408385031215612ebf57600080fd5b612ec883612e90565b946020939093013593505050565b600060208284031215612ee857600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612f2d57612f2d612eef565b604052919050565b600082601f830112612f4657600080fd5b81356001600160401b03811115612f5f57612f5f612eef565b612f72601f8201601f1916602001612f05565b818152846020838601011115612f8757600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215612fb657600080fd5b81356001600160401b03811115612fcc57600080fd5b612fd884828501612f35565b949350505050565b600080600060608486031215612ff557600080fd5b612ffe84612e90565b925061300c60208501612e90565b9150604084013590509250925092565b60006001600160401b0382111561303557613035612eef565b5060051b60200190565b600082601f83011261305057600080fd5b813560206130656130608361301c565b612f05565b82815260059290921b8401810191818101908684111561308457600080fd5b8286015b848110156130af57803560ff811681146130a25760008081fd5b8352918301918301613088565b509695505050505050565b600082601f8301126130cb57600080fd5b813560206130db6130608361301c565b82815260059290921b840181019181810190868411156130fa57600080fd5b8286015b848110156130af57803583529183019183016130fe565b6000806000806080858703121561312b57600080fd5b61313485612e90565b935060208501356001600160401b038082111561315057600080fd5b61315c8883890161303f565b9450604087013591508082111561317257600080fd5b61317e888389016130ba565b9350606087013591508082111561319457600080fd5b506131a1878288016130ba565b91505092959194509250565b6000602082840312156131bf57600080fd5b6110cc82612e90565b600080600080606085870312156131de57600080fd5b84356001600160401b03808211156131f557600080fd5b818701915087601f83011261320957600080fd5b81358181111561321857600080fd5b8860208260051b850101111561322d57600080fd5b60209283019650945050850135915061324860408601612e90565b905092959194509250565b6000806040838503121561326657600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156132a557815187529582019590820190600101613289565b509495945050505050565b8481526080602082015260006132c96080830186613275565b82810360408401526132db8186613275565b905082810360608401526132ef8185613275565b979650505050505050565b6000806040838503121561330d57600080fd5b82356001600160401b0381111561332357600080fd5b61332f85828601612f35565b95602094909401359450505050565b6000806040838503121561335157600080fd5b61335a83612e90565b915061336860208401612e90565b90509250929050565b600080600080600060a0868803121561338957600080fd5b61339286612e90565b94506020860135935060408601356001600160401b03808211156133b557600080fd5b6133c189838a0161303f565b945060608801359150808211156133d757600080fd5b6133e389838a016130ba565b935060808801359150808211156133f957600080fd5b50613406888289016130ba565b9150509295509295909350565b6000806040838503121561342657600080fd5b61342f83612e90565b915060208301356001600160401b0381111561344a57600080fd5b61345685828601612f35565b9150509250929050565b6001600160a01b038516815260806020820181905260009061348490830186612e51565b6040830194909452506060015292915050565b600181811c908216806134ab57607f821691505b602082108114156134cc57634e487b7160e01b600052602260045260246000fd5b50919050565b600082516134e4818460208701612e25565b9190910192915050565b634e487b7160e01b600052601160045260246000fd5b60008261352157634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115613539576135396134ee565b500190565b6000600019821415613552576135526134ee565b5060010190565b634e487b7160e01b600052603260045260246000fd5b600082821015613581576135816134ee565b500390565b60008160001904831182151516156135a0576135a06134ee565b500290565b600181815b808511156135e05781600019048211156135c6576135c66134ee565b808516156135d357918102915b93841c93908002906135aa565b509250929050565b6000826135f7575060016108f6565b81613604575060006108f6565b816001811461361a576002811461362457613640565b60019150506108f6565b60ff841115613635576136356134ee565b50506001821b6108f6565b5060208310610133831016604e8410600b8410161715613663575081810a6108f6565b61366d83836135a5565b8060001904821115613681576136816134ee565b029392505050565b60006110cc83836135e8565b6060815260006136a86060830186612e51565b60208301949094525060400152919050565b6001600160a01b03841681526060602082018190526000906136de90830185612e51565b9050826040830152949350505050565b6000816136fd576136fd6134ee565b506000190190565b600060ff821660ff84168060ff03821115613722576137226134ee565b019392505050565b6000835161373c818460208801612e25565b9190910191825250602001919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220bfc09f65a590640456e737cbc575832c6c12fa1102996914da12221bcb288cca64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1208,
        "contract": "contracts/NGP.sol:NGP",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 187,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 193,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 195,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 197,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 199,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 779,
        "contract": "contracts/NGP.sol:NGP",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 2611,
        "contract": "contracts/NGP.sol:NGP",
        "label": "daySupply",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 2618,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userMints",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(MintInfo)2609_storage))"
      },
      {
        "astId": 2623,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userApplys",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2627,
        "contract": "contracts/NGP.sol:NGP",
        "label": "degreeHeats",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2632,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userNumbers",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_array(t_string_storage)dyn_storage)"
      },
      {
        "astId": 2636,
        "contract": "contracts/NGP.sol:NGP",
        "label": "withdrawAmount",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2640,
        "contract": "contracts/NGP.sol:NGP",
        "label": "unWithDrawAmount",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2644,
        "contract": "contracts/NGP.sol:NGP",
        "label": "rankWithdrawAmount",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2648,
        "contract": "contracts/NGP.sol:NGP",
        "label": "minters",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2650,
        "contract": "contracts/NGP.sol:NGP",
        "label": "spendNonce",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 2654,
        "contract": "contracts/NGP.sol:NGP",
        "label": "isOwner",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2657,
        "contract": "contracts/NGP.sol:NGP",
        "label": "owners",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2659,
        "contract": "contracts/NGP.sol:NGP",
        "label": "required",
        "offset": 0,
        "slot": "113",
        "type": "t_uint256"
      },
      {
        "astId": 2661,
        "contract": "contracts/NGP.sol:NGP",
        "label": "genesisTs",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 2663,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeMinters",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 2665,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeNumbers",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 2667,
        "contract": "contracts/NGP.sol:NGP",
        "label": "claimMints",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 2669,
        "contract": "contracts/NGP.sol:NGP",
        "label": "maxMeshHeats",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 2671,
        "contract": "contracts/NGP.sol:NGP",
        "label": "destructions",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 2673,
        "contract": "contracts/NGP.sol:NGP",
        "label": "SECONDS_IN_DAY",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 2682,
        "contract": "contracts/NGP.sol:NGP",
        "label": "apy",
        "offset": 0,
        "slot": "121",
        "type": "t_uint256"
      },
      {
        "astId": 2684,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeStakes",
        "offset": 0,
        "slot": "122",
        "type": "t_uint256"
      },
      {
        "astId": 2686,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalNGPStaked",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 2688,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalEarn",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      },
      {
        "astId": 2693,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userStakes",
        "offset": 0,
        "slot": "125",
        "type": "t_mapping(t_address,t_struct(StakeInfo)2680_storage)"
      },
      {
        "astId": 2697,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaims",
        "offset": 0,
        "slot": "126",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2701,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaimed",
        "offset": 0,
        "slot": "127",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2703,
        "contract": "contracts/NGP.sol:NGP",
        "label": "treasuryValue",
        "offset": 0,
        "slot": "128",
        "type": "t_uint256"
      },
      {
        "astId": 2705,
        "contract": "contracts/NGP.sol:NGP",
        "label": "FoundationAddr",
        "offset": 0,
        "slot": "129",
        "type": "t_address"
      },
      {
        "astId": 2709,
        "contract": "contracts/NGP.sol:NGP",
        "label": "stakeValues",
        "offset": 0,
        "slot": "130",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2713,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayReceived",
        "offset": 0,
        "slot": "131",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2717,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayStaked",
        "offset": 0,
        "slot": "132",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2721,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayUnStaked",
        "offset": 0,
        "slot": "133",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_string_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string[])",
        "numberOfBytes": "32",
        "value": "t_array(t_string_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_string_memory_ptr,t_struct(MintInfo)2609_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(string => struct NGP.MintInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(MintInfo)2609_storage)"
      },
      "t_mapping(t_address,t_struct(StakeInfo)2680_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NGP.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)2680_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(MintInfo)2609_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct NGP.MintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MintInfo)2609_storage"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintInfo)2609_storage": {
        "encoding": "inplace",
        "label": "struct NGP.MintInfo",
        "members": [
          {
            "astId": 2602,
            "contract": "contracts/NGP.sol:NGP",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2604,
            "contract": "contracts/NGP.sol:NGP",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 2606,
            "contract": "contracts/NGP.sol:NGP",
            "label": "updateTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2608,
            "contract": "contracts/NGP.sol:NGP",
            "label": "withdrawTs",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakeInfo)2680_storage": {
        "encoding": "inplace",
        "label": "struct NGP.StakeInfo",
        "members": [
          {
            "astId": 2675,
            "contract": "contracts/NGP.sol:NGP",
            "label": "term",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2677,
            "contract": "contracts/NGP.sol:NGP",
            "label": "maturityTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2679,
            "contract": "contracts/NGP.sol:NGP",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}