{
  "address": "0x6288A5c0c830cF0B4947e74921a5A6A273ee0387",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ClaimMintReward",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "MintNGP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FoundationAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SECONDS_IN_DAY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeMinters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addSpendNonce",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "claimMintReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimMints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayClaims",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daySupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "dayUnStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "degreeHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destructions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisTs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEarthDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "destruction",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "treasury",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "foundation",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshDashboard",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "participants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalclaimMints",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimedMesh",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxHeats",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sinceGenesis",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMeshData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "userCounts",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "launchData",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalMinted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidSupply",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNetworkEvents",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_genesisTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_received",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_staked",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_unstaked",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpendNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getStakeInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "revenue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimable",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalApy",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "staked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalEarnValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_apy",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_foundationAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMeshHeats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_number",
          "type": "uint256"
        }
      ],
      "name": "mintNGP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rankWithdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalEarn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNGPStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unWithDrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userApplys",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userMints",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "number",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updateTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawTs",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userNumbers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "term",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTs",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint8[]",
          "name": "vs",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "rs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "ss",
          "type": "bytes32[]"
        }
      ],
      "name": "validSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "withdrawAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9b6f4ade639402c8a77626e3eb347da2a55312e91f10862ec333133843d5af7d",
  "receipt": {
    "to": null,
    "from": "0x75bC9FBD1F907695A5ab823772F78981bE0BFC83",
    "contractAddress": "0x6288A5c0c830cF0B4947e74921a5A6A273ee0387",
    "transactionIndex": 0,
    "gasUsed": "2713591",
    "logsBloom": "0x
    "blockHash": "0xa39ab3718115d7d201eace72d78ef8503c152549c79ca88ba6d2e82b25a94ad5",
    "transactionHash": "0x9b6f4ade639402c8a77626e3eb347da2a55312e91f10862ec333133843d5af7d",
    "logs": [],
    "blockNumber": 15,
    "cumulativeGasUsed": "2713591",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "f2167ae86265e754687404bbf902d529",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimMintReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"MintNGP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FoundationAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SECONDS_IN_DAY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeMinters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addSpendNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"claimMintReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayClaims\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daySupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"dayUnStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"degreeHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destructions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEarthDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destruction\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasury\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"foundation\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshDashboard\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"participants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalclaimMints\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedMesh\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxHeats\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sinceGenesis\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMeshData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"userCounts\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"launchData\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMinted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidSupply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNetworkEvents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_genesisTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_received\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_staked\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_unstaked\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpendNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getStakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"revenue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalApy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"staked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarnValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_apy\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_foundationAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMeshHeats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"mintNGP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rankWithdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalEarn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNGPStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unWithDrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userApplys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userMints\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawTs\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userNumbers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint8[]\",\"name\":\"vs\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"rs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"ss\",\"type\":\"bytes32[]\"}],\"name\":\"validSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"withdrawAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NGP.sol\":\"NGP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/NGP.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.8;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract NGP is ERC20(\\\"NGP Token\\\",\\\"NGP\\\"),Initializable {\\n    struct MintInfo {\\n        address user;\\n        uint256 number;\\n        uint256 updateTs;\\n        uint256 withdrawTs;\\n    }\\n\\n    uint256 public daySupply;\\n\\n    mapping(address => mapping(uint256=>MintInfo)) public userMints;\\n\\n    mapping(uint256 => address[]) public userApplys;\\n \\n    mapping(uint256 => uint256) public degreeHeats;\\n\\n    mapping(address => uint256[]) public userNumbers;\\n\\n    mapping(address => uint256)  public withdrawAmount;\\n\\n    mapping(address => uint256) public unWithDrawAmount;\\n\\n    mapping(address => uint256)  public rankWithdrawAmount; \\n\\n    mapping(address => bool) private minters;\\n\\n    uint256 private spendNonce;\\n\\n    mapping(address => bool) private isOwner;\\n\\n    address[] private owners;\\n\\n    uint256 private required;\\n\\n    uint256 public  genesisTs;\\n\\n    uint256 public activeMinters;\\n\\n    uint256 public activeNumbers;\\n\\n    uint256 public claimMints;\\n\\n    uint256 public maxMeshHeats;\\n\\n    uint256 public destructions;\\n\\n    uint256 public  SECONDS_IN_DAY;\\n\\n    struct StakeInfo {\\n        uint256 term;\\n        uint256 maturityTs;\\n        uint256 amount;\\n    }\\n\\n    uint256 public apy;\\n\\n    uint256 public activeStakes;\\n    uint256 public totalNGPStaked;\\n\\n    uint256 public totalEarn;\\n\\n    mapping(address => StakeInfo) public userStakes;\\n\\n    mapping(uint256 => uint256) public dayClaims;\\n\\n    mapping(uint256 => bool) public dayClaimed;\\n\\n    uint256 public treasuryValue;\\n\\n    address public FoundationAddr;\\n \\n    mapping(address => uint256) public stakeValues;\\n\\n    //\\u5f53\\u65e5\\u94f8\\u9020NGP\\n    mapping(uint256 => uint256) public dayReceived;\\n\\n    //\\u5f53\\u65e5\\u8d28\\u62bcNGP\\n    mapping(uint256 => uint256) public dayStaked;\\n\\n    //\\u5f53\\u65e5\\u89e3\\u9501NGP\\n    mapping(uint256 => uint256) public dayUnStaked;\\n\\n    event MintNGP(address user,uint256 number,uint256 time);\\n\\n    event ClaimMintReward(address user,uint256 amount);\\n\\n    event Staked(address indexed user, uint256 amount, uint256 term);\\n\\n    event Withdrawn(address indexed user, uint256 amount, uint256 reward);\\n\\n    modifier isOnlyOwner {\\n        require(isOwner[msg.sender],\\\"not owner\\\");\\n        _;\\n    }\\n\\n    function initialize(address[] calldata _owners,uint256 _apy,address _foundationAddr) external initializer {\\n        for (uint i = 0; i < _owners.length; i++) {\\n            //onwer should be distinct, and non-zero\\n            address _owner  = _owners[i];\\n            if (isOwner[_owner] || _owner == address(0x0)) {\\n                revert();\\n            }\\n           \\n            isOwner[_owner] = true;\\n            owners.push(_owner);\\n        }\\n\\n        required = _owners.length/2 + 1;\\n\\n        SECONDS_IN_DAY = 3_600 * 24;\\n\\n        genesisTs = block.timestamp;\\n\\n        apy = _apy;\\n\\n        FoundationAddr = _foundationAddr;\\n    }\\n\\n    //\\u8fdb\\u884cNGP\\u7684mint,\\u9700\\u8981\\u4f20\\u5165\\u7f16\\u53f7\\n    //1. \\u540c\\u4e00\\u4e2a\\u5750\\u6807\\u8303\\u56f4\\uff0c\\u4e00\\u4e2a\\u94b1\\u5305\\u5730\\u5740\\u53ea\\u80fd\\u7ed1\\u5b9a\\u4e00\\u6b21\\n    //2. \\u5982\\u679c\\u7528\\u6237\\u7533\\u660e\\u7684\\u7f51\\u683c\\u5df2\\u88ab\\u5176\\u5b83\\u7528\\u6237\\u7533\\u660e\\u5360\\u9886\\u8fc7\\u7684\\u8bdd\\uff0c\\u9700\\u8981\\u71c3\\u70e7\\n    function mintNGP(uint256 _number) external {\\n        MintInfo memory mintInfo = userMints[msg.sender][_number];\\n\\n        require(mintInfo.number == 0, \\\"mNGP: Mint already in progress\\\");\\n\\n        uint256 _len = userApplys[_number].length;\\n        if( _len != 0) {\\n            uint256 _amount = degreeHeats[_number] / 10;\\n            destructions += _amount;\\n\\n            _burn(msg.sender, _amount);\\n        }else{\\n            activeNumbers++;\\n        }\\n\\n        mintInfo.number = _number;\\n        mintInfo.user = msg.sender;\\n        mintInfo.updateTs = block.timestamp;\\n        mintInfo.withdrawTs = block.timestamp;\\n        userMints[msg.sender][_number] = mintInfo;\\n\\n        for(uint256 i = 0;i < userApplys[_number].length;i++){\\n            address _user = userApplys[_number][i];\\n            uint256 _day = (block.timestamp - userMints[_user][_number].withdrawTs) / SECONDS_IN_DAY;\\n            uint256 _withAmount =  _day * 6667 / _len;\\n\\n            //\\u7528\\u6237\\u5f53\\u65e5\\u7684\\u7f51\\u683c\\u6316\\u77ff\\u6536\\u76ca\\u4e00\\u76f4\\u672a\\u88ab\\u9886\\u53d6\\u7684\\u8bdd\\uff0c\\u5c06\\u6bcf\\u8fc724\\u5c0f\\u65f6\\u8870\\u51cf\\u4e00\\u6b21\\uff0c\\u6bcf\\u6b21\\u8870\\u51cf50%\\u3002\\n            _withAmount =  _withAmount * (2 - 1/(2 ** (_day - 1)));\\n            userMints[_user][_number].withdrawTs = block.timestamp;\\n\\n            withdrawAmount[_user] += _withAmount;\\n        }\\n\\n        userApplys[_number].push(msg.sender);\\n\\n        //\\u5e73\\u5747\\u6536\\u76ca\\u503c: 864,000 / 12,960,000,0 = 0.0006667\\n        uint256 _n = userApplys[_number].length;\\n\\n        uint256 _degreeHeats = 6667 * (106 ** _n / 100 ** _n);\\n\\n        degreeHeats[_number]  = _degreeHeats;\\n\\n        if(_degreeHeats > maxMeshHeats) {\\n            maxMeshHeats = _degreeHeats;\\n        }\\n        \\n        userNumbers[msg.sender].push(_number);\\n\\n        if(!minters[msg.sender]) {\\n            activeMinters++;\\n\\n            minters[msg.sender] = true;\\n        }\\n\\n        uint256 _today = block.timestamp / SECONDS_IN_DAY; \\n        if(!dayClaimed[_today-1] && block.timestamp >= genesisTs + SECONDS_IN_DAY * 3) {\\n            treasuryValue += ((6667 - dayClaims[_today-2]) + (129600000 - activeNumbers) * 6667) * 10 ** 11;\\n\\n            dayClaimed[_today-1] = true;\\n        }\\n\\n        claimMints++;\\n\\n        emit MintNGP(msg.sender,_number,block.timestamp);\\n    }\\n\\n    //_amount:\\u662f\\u7ebf\\u4e0b\\u8ba1\\u7b97\\u768480%\\u90e8\\u5206\\u7684\\u5956\\u52b1 + 2\\u90e8\\u5206\\u7684\\u5956\\u52b1\\n    function claimMintReward(address _user,uint256 _amount,uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public isOnlyOwner  {\\n        require(validSignature(_user,vs, rs, ss), \\\"invalid signatures\\\");\\n        spendNonce = spendNonce + 1;\\n\\n        uint256 _totalAmount = 0;\\n\\n        uint256 _today = block.timestamp / SECONDS_IN_DAY; \\n\\n        //\\u6bcf\\u592910%\\u90e8\\u5206\\u6536\\u76ca\\n        for(uint256 i = 0;i < userNumbers[_user].length;i++){\\n            uint256 _number = userNumbers[_user][i];\\n            uint256 _len = userApplys[_number].length;\\n\\n            uint256 _day = (block.timestamp - userMints[_user][_number].withdrawTs) / SECONDS_IN_DAY;\\n\\n            uint256 _value = _day * 6667 /_len;\\n\\n            if(_day >= 1) {\\n                dayClaims[_today-1] += _value;\\n            }\\n\\n            //\\u7528\\u6237\\u5f53\\u65e5\\u7684\\u7f51\\u683c\\u6316\\u77ff\\u6536\\u76ca\\u4e00\\u76f4\\u672a\\u88ab\\u9886\\u53d6\\u7684\\u8bdd\\uff0c\\u5c06\\u6bcf\\u8fc724\\u5c0f\\u65f6\\u8870\\u51cf\\u4e00\\u6b21\\uff0c\\u6bcf\\u6b21\\u8870\\u51cf50%\\u3002\\n            _totalAmount +=  _value * (2 - 1/(2 ** (_day - 1)));\\n\\n            userMints[_user][_number].withdrawTs = block.timestamp;\\n        }\\n\\n        if(!dayClaimed[_today-1] && block.timestamp >= genesisTs + SECONDS_IN_DAY * 3) {\\n            uint256 _tValue = ((6667 - dayClaims[_today-2]) + (129600000 - activeNumbers) * 6667) * 10 ** 11;\\n            treasuryValue += _tValue;\\n\\n            mint(FoundationAddr, _tValue/5);\\n\\n            dayClaimed[_today-1] = true;\\n        }\\n\\n        //10%\\u90e8\\u5206\\n        //_reward\\u6709\\u4e2a\\u7cbe\\u5ea6\\uff0c10 ** 11,0.0006667\\u4e2a\\n        uint256 _reward = (_totalAmount + withdrawAmount[_user]) * 10 /100 * 10 ** 11;\\n\\n        uint256 _unReward = (_totalAmount + withdrawAmount[_user]) * 90 /100;\\n        unWithDrawAmount[msg.sender] = _unReward;\\n\\n        mint(_user,_reward + _amount );\\n\\n        withdrawAmount[_user] = 0;\\n    }\\n\\n    function stake(uint256 amount, uint256 term) external {\\n        require(balanceOf(msg.sender) >= amount, \\\"NGP: not enough balance\\\");\\n        require(amount > 0, \\\"NGP: amount > 0\\\");\\n        require(term  >= 1, \\\"NGP: term >= 1\\\"); \\n        require(userStakes[msg.sender].amount == 0, \\\"NGP: stake exists\\\"); // \\u5df2\\u7ecf\\u8d28\\u62bc\\u8fc7\\u4e86\\n\\n        // burn staked NGP\\n        _burn(msg.sender, amount);  // \\u70e7\\u6389\\u4e00\\u4e9b token \\n        // create NGP Stake\\n        _createStake(amount, term);   // \\u521b\\u5efa\\u8d28\\u62bc\\u6570\\u636e  \\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        dayStaked[_today] += amount;\\n\\n        emit Staked(msg.sender, amount, term);\\n    }\\n\\n    function withdraw() external {\\n        StakeInfo memory userStake = userStakes[msg.sender];\\n        require(userStake.amount > 0, \\\"NGP: no stake exists\\\");\\n        // \\u8ba1\\u7b97\\u8d28\\u62bc\\u5956\\u52b1\\n        uint256 ngpReward = _calculateStakeReward(\\n            userStake.amount,\\n            userStake.term,\\n            userStake.maturityTs\\n        );\\n\\n        uint256 unLockValue = userStake.amount + ngpReward;\\n\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        stakeValues[msg.sender] += ngpReward;\\n\\n        totalEarn += ngpReward;\\n\\n        activeStakes--;\\n        totalNGPStaked -= userStake.amount;\\n\\n        dayUnStaked[_today] += unLockValue;\\n\\n        mint(msg.sender, unLockValue);\\n        emit Withdrawn(msg.sender, userStake.amount, ngpReward);\\n        delete userStakes[msg.sender];\\n    }\\n\\n    function _calculateStakeReward(\\n        uint256 amount,\\n        uint256 term,\\n        uint256 maturityTs\\n    ) private view returns (uint256) {\\n        if (block.timestamp > maturityTs) { \\n            uint256 rate = apy * term;   // apy*\\u5929\\u6570*1000/365 \\n            return (amount * rate) / 10000;   // \\u8d28\\u62bc\\u7684\\u6570\\u91cf * rate / 100_000_000 \\n        }\\n        return 0;\\n    }\\n\\n    function _createStake(uint256 amount, uint256 term) private {\\n        userStakes[msg.sender] = StakeInfo({\\n            term: term,        // \\u5929\\u6570\\n            maturityTs: block.timestamp + term * SECONDS_IN_DAY, // \\u5230\\u671f\\u65f6\\u95f4\\n            amount: amount  // \\u6570\\u91cf\\n        });\\n\\n        activeStakes++;     // \\u6d3b\\u8dc3\\u8d28\\u62bc\\u8005\\u6570\\u91cf\\n        totalNGPStaked += amount; // \\u603b\\u7684\\u8d28\\u62bc\\u6570\\u91cf\\n    }\\n\\n    function validSignature(address _sender,uint8[] memory vs, bytes32[] memory rs, bytes32[] memory ss) public view returns (bool) {\\n        require(vs.length == rs.length,\\\"vs.length == rs.length\\\");\\n        require(rs.length == ss.length,\\\"rs.length == ss.length\\\");\\n        require(vs.length <= owners.length,\\\"vs.length <= owners.length\\\");\\n        require(vs.length >= required,\\\"vs.length >= required\\\");\\n        bytes32 message = _messageToRecover(_sender);\\n        address[] memory addrs = new address[](vs.length);\\n        for (uint i = 0; i < vs.length; i++) {\\n            //recover the address associated with the public key from elliptic curve signature or return zero on error\\n            addrs[i] = ecrecover(message, vs[i]+27, rs[i], ss[i]);\\n        }\\n       \\n        require(_distinctOwners(addrs),\\\"_distinctOwners\\\");\\n        return true;\\n    }\\n\\n    function _messageToRecover(address _sender) private view returns (bytes32) {\\n        bytes32 hashedUnsignedMessage = generateMessageToSign(_sender);\\n        bytes memory prefix = \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\";\\n        return keccak256(abi.encodePacked(prefix, hashedUnsignedMessage));\\n    }\\n\\n    function generateMessageToSign(address _sender) private view returns (bytes32) {\\n        //the sequence should match generateMultiSigV2 in JS\\n        bytes32 message = keccak256(abi.encodePacked(_sender,block.chainid,spendNonce));\\n        return message;\\n    }\\n\\n    function _distinctOwners(address[] memory addrs) private view returns (bool) {\\n        if (addrs.length > owners.length) {\\n            return false;\\n        }\\n        for (uint i = 0; i < addrs.length; i++) {\\n            if (!isOwner[addrs[i]]) {\\n                return false;\\n            }\\n            //address should be distinct\\n            for (uint j = 0; j < i; j++) {\\n                if (addrs[i] == addrs[j]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function getSpendNonce() external view returns (uint256) {\\n        return spendNonce;\\n    }\\n\\n    function addSpendNonce() external  {\\n        spendNonce++;\\n    }  \\n\\n    function getMeshData() view external returns(uint256 userCounts,uint256 launchData,uint256 totalMinted,uint256 liquidSupply) {\\n        userCounts = activeMinters;\\n        launchData = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n        totalMinted = totalSupply();\\n        liquidSupply = totalMinted - balanceOf(address(this));\\n    }\\n\\n    function getMeshDashboard() view external returns (uint256 participants,uint256 totalclaimMints,uint256 claimedMesh,uint256 maxHeats,uint256 sinceGenesis) {\\n        participants = activeMinters;\\n        totalclaimMints = claimMints;\\n        claimedMesh = activeNumbers;\\n        maxHeats = maxMeshHeats;\\n        sinceGenesis = (block.timestamp - genesisTs) / SECONDS_IN_DAY;\\n    }\\n\\n    function getEarthDashboard() view external returns (uint256 _totalSupply,uint256 liquidSupply,uint256 destruction,uint256 totalStaked,uint256 treasury,uint256 foundation) {\\n        _totalSupply = totalSupply();\\n        liquidSupply = balanceOf(address(this));\\n        destruction = destructions;\\n        totalStaked = totalNGPStaked;\\n        treasury = treasuryValue;\\n        foundation = balanceOf(FoundationAddr);\\n    }\\n\\n    function getStakeInfo(address _user) view external returns (uint256 tvl,uint256 revenue,uint256 earned,uint256 claimable,uint256 totalApy,uint256 staked,uint256 totalEarnValue) {\\n        tvl = totalNGPStaked * 1/5;\\n        revenue = totalEarn * 1/5;\\n        earned = totalEarn;\\n        if(userStakes[_user].maturityTs >= block.timestamp) {\\n            claimable = userStakes[_user].amount;\\n        }else{\\n            claimable = 0;\\n        }\\n\\n        totalApy = apy;\\n\\n        staked = userStakes[_user].amount;\\n\\n        totalEarnValue = stakeValues[_user];\\n    }\\n\\n    function mint(address user,uint256 amount) private {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n\\n        dayReceived[_today] += amount;\\n        _mint(user, amount);\\n    }\\n\\n    function getNetworkEvents() view external returns(uint256 _genesisTs,uint256[] memory _received,uint256[] memory _staked,uint256[] memory _unstaked) {\\n        uint256 _today = (block.timestamp - genesisTs) / SECONDS_IN_DAY; \\n        _received = new uint256[](_today);\\n        _staked = new uint256[](_today);\\n        _unstaked = new uint256[](_today);\\n\\n        _genesisTs = genesisTs;\\n\\n        for(uint256 i = 0;i < _today;i++){\\n            _received[i] = dayReceived[i];\\n            _staked[i] = dayStaked[i];\\n            _unstaked[i] = dayUnStaked[i];\\n        }\\n    }\\n}\",\"keccak256\":\"0xa2d032842cc2da85f1b79e675c1c52a4699ee98602d4913488a7e4b42f258dac\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061030c5760003560e01c80638ed4064a1161019d578063cb48e3c6116100e9578063e3c41c4e116100a2578063ed2f23691161007c578063ed2f2369146107ee578063f01d110c146107f7578063f39b3fb514610800578063f9a18ba51461081357600080fd5b8063e3c41c4e1461078b578063e9cabce7146107bb578063ebcdbc2d146107ce57600080fd5b8063cb48e3c6146106b2578063cb92ef4a146106d2578063cd49618c146106f2578063dd62ed3e14610766578063dffd722f14610779578063e3af6d0a1461078257600080fd5b8063a9059cbb11610156578063bbf7659011610130578063bbf765901461060d578063c18fab141461062d578063c345315314610662578063c6a2a9f1146106aa57600080fd5b8063a9059cbb146105de578063ad3bbc19146105f1578063b4800cdc1461060457600080fd5b80638ed4064a14610571578063903993181461057a57806395d89b4114610592578063a457c2d71461059a578063a6734715146105ad578063a6a5ff92146105b657600080fd5b80633ccfd60b1161025c57806361a52a361161021557806372483bf9116101ef57806372483bf9146104d65780637b0472f0146104e9578063890d3b27146104fc5780638da7ad231461052757600080fd5b806361a52a36146104825780636e5d82801461048b57806370a08231146104ad57600080fd5b80633ccfd60b146104155780633d7af48f1461041d5780634c2346fa146104265780634f420151146104395780635cad385c146104595780635f7bb9321461046257600080fd5b80631c02b1f4116102c9578063313ce567116102a3578063313ce567146103e057806339509351146103ef5780633adfe5ea146104025780633bcfc4b81461040c57600080fd5b80631c02b1f4146103a457806323b872dd146103ad5780632c2d0a0c146103c057600080fd5b806306fdde0314610311578063095ea7b31461032f5780630aedb5ba146103525780630bfbba01146103695780630ffcccff1461037c57806318160ddd1461039c575b600080fd5b610319610833565b60405161032691906127f5565b60405180910390f35b61034261033d366004612844565b6108c5565b6040519015158152602001610326565b61035b60065481565b604051908152602001610326565b61035b610377366004612844565b6108df565b61035b61038a36600461286e565b60246020526000908152604090205481565b60025461035b565b61035b60175481565b6103426103bb366004612887565b610910565b61035b6103ce36600461286e565b60266020526000908152604090205481565b60405160128152602001610326565b6103426103fd366004612844565b610936565b61040a610958565b005b61035b601a5481565b61040a61096f565b61035b60155481565b610342610434366004612a04565b610b3b565b61035b610447366004612a9d565b600b6020526000908152604090205481565b61035b60185481565b61035b610470366004612a9d565b60236020526000908152604090205481565b61035b60195481565b61034261049936600461286e565b602080526000908152604090205460ff1681565b61035b6104bb366004612a9d565b6001600160a01b031660009081526020819052604090205490565b61040a6104e4366004612ab8565b610e20565b61040a6104f7366004612b44565b611057565b60225461050f906001600160a01b031681565b6040516001600160a01b039091168152602001610326565b610556610535366004612a9d565b601e6020526000908152604090208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610326565b61035b601c5481565b610582611229565b6040516103269493929190612ba1565b6103196113da565b6103426105a8366004612844565b6113e9565b61035b60165481565b6105be61146f565b604080519485526020850193909352918301526060820152608001610326565b6103426105ec366004612844565b6114c5565b61050f6105ff366004612b44565b6114d3565b61035b60145481565b61035b61061b36600461286e565b60096020526000908152604090205481565b61063561150b565b604080519687526020870195909552938501929092526060840152608083015260a082015260c001610326565b610675610670366004612a9d565b61155d565b604080519788526020880196909652948601939093526060850191909152608084015260a083015260c082015260e001610326565b600f5461035b565b61035b6106c0366004612a9d565b600c6020526000908152604090205481565b61035b6106e036600461286e565b601f6020526000908152604090205481565b61073c610700366004612844565b600760209081526000928352604080842090915290825290208054600182015460028301546003909301546001600160a01b0390921692909184565b604080516001600160a01b0390951685526020850193909352918301526060820152608001610326565b61035b610774366004612beb565b61162e565b61035b601d5481565b61035b60135481565b610793611659565b604080519586526020860194909452928401919091526060830152608082015260a001610326565b61040a6107c9366004612c1e565b61168c565b61035b6107dc36600461286e565b60256020526000908152604090205481565b61035b601b5481565b61035b60215481565b61040a61080e36600461286e565b611ab9565b61035b610821366004612a9d565b600d6020526000908152604090205481565b60606003805461084290612cc1565b80601f016020809104026020016040519081016040528092919081815260200182805461086e90612cc1565b80156108bb5780601f10610890576101008083540402835291602001916108bb565b820191906000526020600020905b81548152906001019060200180831161089e57829003601f168201915b5050505050905090565b6000336108d3818585611fb5565b60019150505b92915050565b600a60205281600052604060002081815481106108fb57600080fd5b90600052602060002001600091509150505481565b60003361091e8582856120d9565b610929858585612153565b60019150505b9392505050565b6000336108d3818585610949838361162e565b6109539190612d12565b611fb5565b600f805490600061096883612d2a565b9190505550565b336000908152601e602090815260409182902082516060810184528154815260018201549281019290925260020154918101829052906109ed5760405162461bcd60e51b81526020600482015260146024820152734e47503a206e6f207374616b652065786973747360601b60448201526064015b60405180910390fd5b6000610a068260400151836000015184602001516122f7565b90506000818360400151610a1a9190612d12565b9050600060195460135442610a2f9190612d45565b610a399190612d5c565b33600090815260236020526040812080549293508592909190610a5d908490612d12565b9250508190555082601d6000828254610a769190612d12565b9091555050601b8054906000610a8b83612d7e565b91905055508360400151601c6000828254610aa69190612d45565b909155505060008181526026602052604081208054849290610ac9908490612d12565b90915550610ad99050338361233c565b60408085015181519081526020810185905233917f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6910160405180910390a25050336000908152601e6020526040812081815560018101829055600201555050565b60008251845114610b875760405162461bcd60e51b81526020600482015260166024820152750ece65cd8cadccee8d0407a7a40e4e65cd8cadccee8d60531b60448201526064016109e4565b8151835114610bd15760405162461bcd60e51b81526020600482015260166024820152750e4e65cd8cadccee8d0407a7a40e6e65cd8cadccee8d60531b60448201526064016109e4565b60115484511115610c245760405162461bcd60e51b815260206004820152601a60248201527f76732e6c656e677468203c3d206f776e6572732e6c656e67746800000000000060448201526064016109e4565b60125484511015610c6f5760405162461bcd60e51b81526020600482015260156024820152741d9ccb9b195b99dd1a080f8f481c995c5d5a5c9959605a1b60448201526064016109e4565b6000610c7a86612393565b90506000855167ffffffffffffffff811115610c9857610c986128c3565b604051908082528060200260200182016040528015610cc1578160200160208202803683370190505b50905060005b8651811015610dcb57600183888381518110610ce557610ce5612d95565b6020026020010151601b610cf99190612dab565b888481518110610d0b57610d0b612d95565b6020026020010151888581518110610d2557610d25612d95565b602002602001015160405160008152602001604052604051610d63949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610d85573d6000803e3d6000fd5b50505060206040510351828281518110610da157610da1612d95565b6001600160a01b039092166020928302919091019091015280610dc381612d2a565b915050610cc7565b50610dd581612455565b610e135760405162461bcd60e51b815260206004820152600f60248201526e5f64697374696e63744f776e65727360881b60448201526064016109e4565b5060019695505050505050565b600554610100900460ff1615808015610e405750600554600160ff909116105b80610e5a5750303b158015610e5a575060055460ff166001145b610ebd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016109e4565b6005805460ff191660011790558015610ee0576005805461ff0019166101001790555b60005b84811015610fc5576000868683818110610eff57610eff612d95565b9050602002016020810190610f149190612a9d565b6001600160a01b03811660009081526010602052604090205490915060ff1680610f4557506001600160a01b038116155b15610f4f57600080fd5b6001600160a01b03166000818152601060205260408120805460ff191660019081179091556011805491820181559091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180546001600160a01b031916909117905580610fbd81612d2a565b915050610ee3565b50610fd1600285612d5c565b610fdc906001612d12565b6012556201518060195542601355601a839055602280546001600160a01b0319166001600160a01b0384161790558015611050576005805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b336000908152602081905260409020548211156110b65760405162461bcd60e51b815260206004820152601760248201527f4e47503a206e6f7420656e6f7567682062616c616e636500000000000000000060448201526064016109e4565b600082116110f85760405162461bcd60e51b815260206004820152600f60248201526e04e47503a20616d6f756e74203e203608c1b60448201526064016109e4565b600181101561113a5760405162461bcd60e51b815260206004820152600e60248201526d4e47503a207465726d203e3d203160901b60448201526064016109e4565b336000908152601e60205260409020600201541561118e5760405162461bcd60e51b81526020600482015260116024820152704e47503a207374616b652065786973747360781b60448201526064016109e4565b6111983383612550565b6111a28282612682565b6000601954601354426111b59190612d45565b6111bf9190612d5c565b9050826025600083815260200190815260200160002060008282546111e49190612d12565b9091555050604080518481526020810184905233917f1449c6dd7851abc30abf37f57715f492010519147cc2652fbc38202c18a6ee90910160405180910390a2505050565b600060608060606000601954601354426112439190612d45565b61124d9190612d5c565b90508067ffffffffffffffff811115611268576112686128c3565b604051908082528060200260200182016040528015611291578160200160208202803683370190505b5093508067ffffffffffffffff8111156112ad576112ad6128c3565b6040519080825280602002602001820160405280156112d6578160200160208202803683370190505b5092508067ffffffffffffffff8111156112f2576112f26128c3565b60405190808252806020026020018201604052801561131b578160200160208202803683370190505b509150601354945060005b818110156113d257600081815260246020526040902054855186908390811061135157611351612d95565b602002602001018181525050602560008281526020019081526020016000205484828151811061138357611383612d95565b60200260200101818152505060266000828152602001908152602001600020548382815181106113b5576113b5612d95565b6020908102919091010152806113ca81612d2a565b915050611326565b505090919293565b60606004805461084290612cc1565b600033816113f7828661162e565b9050838110156114575760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016109e4565b6114648286868403611fb5565b506001949350505050565b60008060008060145493506019546013544261148b9190612d45565b6114959190612d5c565b92506114a060025490565b306000908152602081905260409020549092506114bd9083612d45565b905090919293565b6000336108d3818585612153565b600860205281600052604060002081815481106114ef57600080fd5b6000918252602090912001546001600160a01b03169150829050565b60008060008060008061151d60025490565b3060009081526020819052604080822054601854601c546021546022546001600160a01b031686529390942054949b919a50985091965094509092509050565b60008060008060008060006005601c5460016115799190612dd0565b6115839190612d5c565b96506005601d5460016115969190612dd0565b6115a09190612d5c565b601d546001600160a01b038a166000908152601e6020526040902060010154919750955042116115ed576001600160a01b0388166000908152601e602052604090206002015493506115f2565b600093505b5050601a546001600160a01b039096166000908152601e6020908152604080832060020154602390925290912054959794969395929490929150565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b601454601654601554601754601954601354600091906116799042612d45565b6116839190612d5c565b90509091929394565b3360009081526010602052604090205460ff166116d75760405162461bcd60e51b81526020600482015260096024820152683737ba1037bbb732b960b91b60448201526064016109e4565b6116e385848484610b3b565b6117245760405162461bcd60e51b8152602060048201526012602482015271696e76616c6964207369676e61747572657360701b60448201526064016109e4565b600f54611732906001612d12565b600f5560195460009081906117479042612d5c565b905060005b6001600160a01b0388166000908152600a60205260409020548110156118cc576001600160a01b0388166000908152600a6020526040812080548390811061179657611796612d95565b6000918252602080832090910154808352600882526040808420546019546001600160a01b038f16865260078552828620848752909452908420600301549194509291906117e49042612d45565b6117ee9190612d5c565b90506000826117ff83611a0b612dd0565b6118099190612d5c565b9050600182106118465780601f600061182360018a612d45565b815260200190815260200160002060008282546118409190612d12565b90915550505b611851600183612d45565b61185c906002612ed3565b611867906001612d5c565b611872906002612d45565b61187c9082612dd0565b6118869088612d12565b6001600160a01b038d1660009081526007602090815260408083209783529690529490942042600390910155509194508291506118c4905081612d2a565b91505061174c565b50602060006118dc600184612d45565b815260208101919091526040016000205460ff161580156119175750601954611906906003612dd0565b6013546119139190612d12565b4210155b156119ea5760006015546307b98a006119309190612d45565b61193c90611a0b612dd0565b601f600061194b600286612d45565b815260200190815260200160002054611a0b6119679190612d45565b6119719190612d12565b6119809064174876e800612dd0565b905080602160008282546119949190612d12565b90915550506022546119b9906001600160a01b03166119b4600584612d5c565b61233c565b6001602060006119c98386612d45565b81526020810191909152604001600020805460ff1916911515919091179055505b6001600160a01b0387166000908152600b6020526040812054606490611a109085612d12565b611a1b90600a612dd0565b611a259190612d5c565b611a349064174876e800612dd0565b6001600160a01b0389166000908152600b602052604081205491925090606490611a5e9086612d12565b611a6990605a612dd0565b611a739190612d5c565b336000908152600c602052604090208190559050611a95896119b48a85612d12565b5050506001600160a01b039095166000908152600b60205260408120555050505050565b336000908152600760209081526040808320848452825291829020825160808101845281546001600160a01b03168152600182015492810183905260028201549381019390935260030154606083015215611b565760405162461bcd60e51b815260206004820152601e60248201527f6d4e47503a204d696e7420616c726561647920696e2070726f6772657373000060448201526064016109e4565b6000828152600860205260409020548015611bb057600083815260096020526040812054611b8690600a90612d5c565b90508060186000828254611b9a9190612d12565b90915550611baa90503382612550565b50611bc6565b60158054906000611bc083612d2a565b91905055505b602082810184815233808552426040808701828152606088019283526000938452600786528184208985529095528220865181546001600160a01b0319166001600160a01b03909116178155925160018401559251600283015591516003909101555b600084815260086020526040902054811015611d65576000848152600860205260408120805483908110611c5f57611c5f612d95565b60009182526020808320909101546019546001600160a01b039091168084526007835260408085208a86529093529183206003015491935090611ca29042612d45565b611cac9190612d5c565b9050600084611cbd83611a0b612dd0565b611cc79190612d5c565b9050611cd4600183612d45565b611cdf906002612ed3565b611cea906001612d5c565b611cf5906002612d45565b611cff9082612dd0565b6001600160a01b03841660008181526007602090815260408083208c8452825280832042600390910155928252600b905290812080549293508392909190611d48908490612d12565b925050819055505050508080611d5d90612d2a565b915050611c29565b5060008381526008602090815260408220805460018101825581845291832090910180546001600160a01b031916331790558482525490611da7826064612ed3565b611db283606a612ed3565b611dbc9190612d5c565b611dc890611a0b612dd0565b6000868152600960205260409020819055601754909150811115611dec5760178190555b336000818152600a60209081526040808320805460018101825590845282842001899055928252600e9052205460ff16611e505760148054906000611e3083612d2a565b9091555050336000908152600e60205260409020805460ff191660011790555b600060195442611e609190612d5c565b905060206000611e71600184612d45565b815260208101919091526040016000205460ff16158015611eac5750601954611e9b906003612dd0565b601354611ea89190612d12565b4210155b15611f5957601554611ec2906307b98a00612d45565b611ece90611a0b612dd0565b601f6000611edd600285612d45565b815260200190815260200160002054611a0b611ef99190612d45565b611f039190612d12565b611f129064174876e800612dd0565b60216000828254611f239190612d12565b909155506001905060206000611f398385612d45565b81526020810191909152604001600020805460ff19169115159190911790555b60168054906000611f6983612d2a565b90915550506040805133815260208101889052428183015290517f6ec386b0d4210954ff68b42c8c0d3aeabd9e884e2401821c8949c7f25bf5b5649181900360600190a1505050505050565b6001600160a01b0383166120175760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109e4565b6001600160a01b0382166120785760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109e4565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60006120e5848461162e565b9050600019811461214d57818110156121405760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016109e4565b61214d8484848403611fb5565b50505050565b6001600160a01b0383166121b75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016109e4565b6001600160a01b0382166122195760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016109e4565b6001600160a01b038316600090815260208190526040902054818110156122915760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016109e4565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a361214d565b60008142111561233257600083601a546123119190612dd0565b90506127106123208287612dd0565b61232a9190612d5c565b91505061092f565b5060009392505050565b60006019546013544261234f9190612d45565b6123599190612d5c565b90508160246000838152602001908152602001600020600082825461237e9190612d12565b9091555061238e9050838361270a565b505050565b6000806123e783600f546040805160609390931b6bffffffffffffffffffffffff19166020808501919091524660348501526054808501939093528151808503909301835260749093019052805191012090565b905060006040518060400160405280601c81526020017f19457468657265756d205369676e6564204d6573736167653a0a33320000000081525090508082604051602001612436929190612edf565b6040516020818303038152906040528051906020012092505050919050565b6011548151600091101561246b57506000919050565b60005b8251811015612547576010600084838151811061248d5761248d612d95565b6020908102919091018101516001600160a01b031682528101919091526040016000205460ff166124c15750600092915050565b60005b81811015612534578381815181106124de576124de612d95565b60200260200101516001600160a01b031684838151811061250157612501612d95565b60200260200101516001600160a01b03161415612522575060009392505050565b8061252c81612d2a565b9150506124c4565b508061253f81612d2a565b91505061246e565b50600192915050565b6001600160a01b0382166125b05760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016109e4565b6001600160a01b038216600090815260208190526040902054818110156126245760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016109e4565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3505050565b6040518060600160405280828152602001601954836126a19190612dd0565b6126ab9042612d12565b81526020908101849052336000908152601e82526040808220845181559284015160018401559290920151600290910155601b8054916126ea83612d2a565b919050555081601c60008282546127019190612d12565b90915550505050565b6001600160a01b0382166127605760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016109e4565b80600260008282546127729190612d12565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b60005b838110156127e45781810151838201526020016127cc565b8381111561214d5750506000910152565b60208152600082518060208401526128148160408501602087016127c9565b601f01601f19169190910160400192915050565b80356001600160a01b038116811461283f57600080fd5b919050565b6000806040838503121561285757600080fd5b61286083612828565b946020939093013593505050565b60006020828403121561288057600080fd5b5035919050565b60008060006060848603121561289c57600080fd5b6128a584612828565b92506128b360208501612828565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612902576129026128c3565b604052919050565b600067ffffffffffffffff821115612924576129246128c3565b5060051b60200190565b600082601f83011261293f57600080fd5b8135602061295461294f8361290a565b6128d9565b82815260059290921b8401810191818101908684111561297357600080fd5b8286015b8481101561299e57803560ff811681146129915760008081fd5b8352918301918301612977565b509695505050505050565b600082601f8301126129ba57600080fd5b813560206129ca61294f8361290a565b82815260059290921b840181019181810190868411156129e957600080fd5b8286015b8481101561299e57803583529183019183016129ed565b60008060008060808587031215612a1a57600080fd5b612a2385612828565b9350602085013567ffffffffffffffff80821115612a4057600080fd5b612a4c8883890161292e565b94506040870135915080821115612a6257600080fd5b612a6e888389016129a9565b93506060870135915080821115612a8457600080fd5b50612a91878288016129a9565b91505092959194509250565b600060208284031215612aaf57600080fd5b61092f82612828565b60008060008060608587031215612ace57600080fd5b843567ffffffffffffffff80821115612ae657600080fd5b818701915087601f830112612afa57600080fd5b813581811115612b0957600080fd5b8860208260051b8501011115612b1e57600080fd5b602092830196509450508501359150612b3960408601612828565b905092959194509250565b60008060408385031215612b5757600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b83811015612b9657815187529582019590820190600101612b7a565b509495945050505050565b848152608060208201526000612bba6080830186612b66565b8281036040840152612bcc8186612b66565b90508281036060840152612be08185612b66565b979650505050505050565b60008060408385031215612bfe57600080fd5b612c0783612828565b9150612c1560208401612828565b90509250929050565b600080600080600060a08688031215612c3657600080fd5b612c3f86612828565b945060208601359350604086013567ffffffffffffffff80821115612c6357600080fd5b612c6f89838a0161292e565b94506060880135915080821115612c8557600080fd5b612c9189838a016129a9565b93506080880135915080821115612ca757600080fd5b50612cb4888289016129a9565b9150509295509295909350565b600181811c90821680612cd557607f821691505b60208210811415612cf657634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115612d2557612d25612cfc565b500190565b6000600019821415612d3e57612d3e612cfc565b5060010190565b600082821015612d5757612d57612cfc565b500390565b600082612d7957634e487b7160e01b600052601260045260246000fd5b500490565b600081612d8d57612d8d612cfc565b506000190190565b634e487b7160e01b600052603260045260246000fd5b600060ff821660ff84168060ff03821115612dc857612dc8612cfc565b019392505050565b6000816000190483118215151615612dea57612dea612cfc565b500290565b600181815b80851115612e2a578160001904821115612e1057612e10612cfc565b80851615612e1d57918102915b93841c9390800290612df4565b509250929050565b600082612e41575060016108d9565b81612e4e575060006108d9565b8160018114612e645760028114612e6e57612e8a565b60019150506108d9565b60ff841115612e7f57612e7f612cfc565b50506001821b6108d9565b5060208310610133831016604e8410600b8410161715612ead575081810a6108d9565b612eb78383612def565b8060001904821115612ecb57612ecb612cfc565b029392505050565b600061092f8383612e32565b60008351612ef18184602088016127c9565b919091019182525060200191905056fea26469706673582212206efa6b58626b05123238cc8b97ee32a4827ccfee521b9a7893b3a775b092655c64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 468,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 474,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 476,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 478,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 480,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 6,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initialized",
        "offset": 0,
        "slot": "5",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/NGP.sol:NGP",
        "label": "_initializing",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 1185,
        "contract": "contracts/NGP.sol:NGP",
        "label": "daySupply",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 1192,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userMints",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(MintInfo)1183_storage))"
      },
      {
        "astId": 1197,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userApplys",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 1201,
        "contract": "contracts/NGP.sol:NGP",
        "label": "degreeHeats",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1206,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userNumbers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 1210,
        "contract": "contracts/NGP.sol:NGP",
        "label": "withdrawAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1214,
        "contract": "contracts/NGP.sol:NGP",
        "label": "unWithDrawAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1218,
        "contract": "contracts/NGP.sol:NGP",
        "label": "rankWithdrawAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1222,
        "contract": "contracts/NGP.sol:NGP",
        "label": "minters",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1224,
        "contract": "contracts/NGP.sol:NGP",
        "label": "spendNonce",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 1228,
        "contract": "contracts/NGP.sol:NGP",
        "label": "isOwner",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1231,
        "contract": "contracts/NGP.sol:NGP",
        "label": "owners",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1233,
        "contract": "contracts/NGP.sol:NGP",
        "label": "required",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 1235,
        "contract": "contracts/NGP.sol:NGP",
        "label": "genesisTs",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 1237,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeMinters",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 1239,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeNumbers",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 1241,
        "contract": "contracts/NGP.sol:NGP",
        "label": "claimMints",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 1243,
        "contract": "contracts/NGP.sol:NGP",
        "label": "maxMeshHeats",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 1245,
        "contract": "contracts/NGP.sol:NGP",
        "label": "destructions",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 1247,
        "contract": "contracts/NGP.sol:NGP",
        "label": "SECONDS_IN_DAY",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 1256,
        "contract": "contracts/NGP.sol:NGP",
        "label": "apy",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 1258,
        "contract": "contracts/NGP.sol:NGP",
        "label": "activeStakes",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 1260,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalNGPStaked",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 1262,
        "contract": "contracts/NGP.sol:NGP",
        "label": "totalEarn",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 1267,
        "contract": "contracts/NGP.sol:NGP",
        "label": "userStakes",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_struct(StakeInfo)1254_storage)"
      },
      {
        "astId": 1271,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaims",
        "offset": 0,
        "slot": "31",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1275,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayClaimed",
        "offset": 0,
        "slot": "32",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 1277,
        "contract": "contracts/NGP.sol:NGP",
        "label": "treasuryValue",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 1279,
        "contract": "contracts/NGP.sol:NGP",
        "label": "FoundationAddr",
        "offset": 0,
        "slot": "34",
        "type": "t_address"
      },
      {
        "astId": 1283,
        "contract": "contracts/NGP.sol:NGP",
        "label": "stakeValues",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1287,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayReceived",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1291,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayStaked",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1295,
        "contract": "contracts/NGP.sol:NGP",
        "label": "dayUnStaked",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(MintInfo)1183_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct NGP.MintInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(MintInfo)1183_storage)"
      },
      "t_mapping(t_address,t_struct(StakeInfo)1254_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct NGP.StakeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(StakeInfo)1254_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(MintInfo)1183_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct NGP.MintInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(MintInfo)1183_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MintInfo)1183_storage": {
        "encoding": "inplace",
        "label": "struct NGP.MintInfo",
        "members": [
          {
            "astId": 1176,
            "contract": "contracts/NGP.sol:NGP",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1178,
            "contract": "contracts/NGP.sol:NGP",
            "label": "number",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1180,
            "contract": "contracts/NGP.sol:NGP",
            "label": "updateTs",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1182,
            "contract": "contracts/NGP.sol:NGP",
            "label": "withdrawTs",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StakeInfo)1254_storage": {
        "encoding": "inplace",
        "label": "struct NGP.StakeInfo",
        "members": [
          {
            "astId": 1249,
            "contract": "contracts/NGP.sol:NGP",
            "label": "term",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1251,
            "contract": "contracts/NGP.sol:NGP",
            "label": "maturityTs",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1253,
            "contract": "contracts/NGP.sol:NGP",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}